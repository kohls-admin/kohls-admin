{"searchDocs":[{"title":"Checkbox","type":0,"sectionRef":"#","url":"/api/Checkbox","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#types","content":" ","version":null,"tagName":"h2"},{"title":"CheckboxDefinition​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#CheckboxDefinition","content":"&lt;/&gt; type CheckboxDefinition = { Value: Types.Stateful&lt;boolean&gt;, _instance: TextButton } A generic function type ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#new","content":"&lt;/&gt; Checkbox.new(definition: CheckboxDefinition) → () Creates a new checkbox. ","version":null,"tagName":"h3"},{"title":"CircleProgress","type":0,"sectionRef":"#","url":"/api/CircleProgress","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"CircleProgress","url":"/api/CircleProgress#types","content":" ","version":null,"tagName":"h2"},{"title":"CircleProgressDefinition​","type":1,"pageTitle":"CircleProgress","url":"/api/CircleProgress#CircleProgressDefinition","content":"&lt;/&gt; type CircleProgressDefinition = { Value: Types.Stateful&lt;boolean&gt;, Padding: UDim , Size: UDim2 , _instance: TextButton } A circular progress indicator type ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"CircleProgress","url":"/api/CircleProgress#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"CircleProgress","url":"/api/CircleProgress#new","content":"&lt;/&gt; CircleProgress.new(definition: CircleProgressDefinition) → () Creates a new circular progress indicator. ","version":null,"tagName":"h3"},{"title":"Hook","type":0,"sectionRef":"#","url":"/api/Hook","content":"Hook","keywords":"","version":null},{"title":"MainModule","type":0,"sectionRef":"#","url":"/api/MainModule","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"MainModule","url":"/api/MainModule#types","content":" ","version":null,"tagName":"h2"},{"title":"_K​","type":1,"pageTitle":"MainModule","url":"/api/MainModule#_K","content":"&lt;/&gt; interface _K { Flux: Flux Auth: Auth Process: Process Registry: Registry Util: Util UI: UI IsClient: boolean IsServer: boolean IsStudio: boolean client: {[any]: any}? pinnedAnnouncement: {}? playerPrefix: {[Player ]: string} _serverLock: boolean creatorId: number log: Logger.log logger: Logger.logger }  ","version":null,"tagName":"h3"},{"title":"Process","type":0,"sectionRef":"#","url":"/api/Process","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Process","url":"/api/Process#functions","content":" ","version":null,"tagName":"h2"},{"title":"rawParse​","type":1,"pageTitle":"Process","url":"/api/Process#rawParse","content":"&lt;/&gt; Process.rawParse( message: string, prefix: string, delimiter: string? ) → {any}? Parses a string into a raw command format. ","version":null,"tagName":"h3"},{"title":"Logger","type":0,"sectionRef":"#","url":"/api/Logger","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Logger","url":"/api/Logger#types","content":" ","version":null,"tagName":"h2"},{"title":"LogType​","type":1,"pageTitle":"Logger","url":"/api/Logger#LogType","content":"&lt;/&gt; type LogType = &quot;INFO&quot; | &quot;WARN&quot; | &quot;ERROR&quot; | &quot;DEBUG&quot; | &quot;CHAT&quot; | &quot;COMMAND&quot; | &quot;PURCHASE&quot; | &quot;DAMAGE&quot; | &quot;DEATH&quot; | &quot;KILL&quot; | &quot;JOIN&quot; | &quot;LEAVE&quot; | string   ","version":null,"tagName":"h3"},{"title":"Log​","type":1,"pageTitle":"Logger","url":"/api/Logger#Log","content":"&lt;/&gt; type Log = { text: string, level: LogType, time: number, user: number? }   ","version":null,"tagName":"h3"},{"title":"Logger​","type":1,"pageTitle":"Logger","url":"/api/Logger#Logger","content":"&lt;/&gt; type Logger = typeof(setmetatable({}:: { logs: {Log}, debug: boolean? },Logger))  ","version":null,"tagName":"h3"},{"title":"Auth","type":0,"sectionRef":"#","url":"/api/Auth","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Auth","url":"/api/Auth#functions","content":" ","version":null,"tagName":"h2"},{"title":"userRoleAdd​","type":1,"pageTitle":"Auth","url":"/api/Auth#userRoleAdd","content":"&lt;/&gt; Auth.userRoleAdd( userId: number, role: Role, persist: boolean? ) → boolean Adds a role to a user if they don't already have it  ","version":null,"tagName":"h3"},{"title":"userRoleRemove​","type":1,"pageTitle":"Auth","url":"/api/Auth#userRoleRemove","content":"&lt;/&gt; Auth.userRoleRemove( userId: number, role: Role ) → boolean Removes a role from a user if it exists  ","version":null,"tagName":"h3"},{"title":"getRank​","type":1,"pageTitle":"Auth","url":"/api/Auth#getRank","content":"&lt;/&gt; Auth.getRank( userId: number, permission: string? ) → ( number, Role ) Checks the maximum role rank of the user, if permission is given it will fetch the highest rank of the roles with that permission  ","version":null,"tagName":"h3"},{"title":"roleCanUseArgument​","type":1,"pageTitle":"Auth","url":"/api/Auth#roleCanUseArgument","content":"&lt;/&gt; Auth.roleCanUseArgument( role: Role, argument: any ) → boolean Checks if a role has access to a command  ","version":null,"tagName":"h3"},{"title":"hasArgument​","type":1,"pageTitle":"Auth","url":"/api/Auth#hasArgument","content":"&lt;/&gt; Auth.hasArgument( userId: number, argument: any ) → boolean Checks if a user has access to a command  ","version":null,"tagName":"h3"},{"title":"roleCanUseCommand​","type":1,"pageTitle":"Auth","url":"/api/Auth#roleCanUseCommand","content":"&lt;/&gt; Auth.roleCanUseCommand( role: Role, command: any ) → boolean Checks if a role has access to a command  ","version":null,"tagName":"h3"},{"title":"hasCommand​","type":1,"pageTitle":"Auth","url":"/api/Auth#hasCommand","content":"&lt;/&gt; Auth.hasCommand( userId: number, command: any ) → boolean Checks if a user has access to a command  ","version":null,"tagName":"h3"},{"title":"hasPermission​","type":1,"pageTitle":"Auth","url":"/api/Auth#hasPermission","content":"&lt;/&gt; Auth.hasPermission( userId: number, permission: string ) → boolean Checks if a user has access to a permission  ","version":null,"tagName":"h3"},{"title":"rankDiff​","type":1,"pageTitle":"Auth","url":"/api/Auth#rankDiff","content":"&lt;/&gt; Auth.rankDiff( userIdFrom: number, userIdTo: number, permission: string? ) → () Gets the difference of two users' ranks, with an optional permission parameter ","version":null,"tagName":"h3"},{"title":"Flux","type":0,"sectionRef":"#","url":"/api/Flux","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Flux","url":"/api/Flux#types","content":" ","version":null,"tagName":"h2"},{"title":"Function​","type":1,"pageTitle":"Flux","url":"/api/Flux#Function","content":"&lt;/&gt; type Function = (...any) → ...any A generic function type  ","version":null,"tagName":"h3"},{"title":"List​","type":1,"pageTitle":"Flux","url":"/api/Flux#List","content":"&lt;/&gt; type List = {T} A generic list type  ","version":null,"tagName":"h3"},{"title":"Set​","type":1,"pageTitle":"Flux","url":"/api/Flux#Set","content":"&lt;/&gt; type Set = {[T]: boolean} A generic set type implemented as a table with boolean values  ","version":null,"tagName":"h3"},{"title":"Dict​","type":1,"pageTitle":"Flux","url":"/api/Flux#Dict","content":"&lt;/&gt; type Dict = {[T]: any} Represents a dictionary-like table with keys of type T and values of any type.  ","version":null,"tagName":"h3"},{"title":"State​","type":1,"pageTitle":"Flux","url":"/api/Flux#State","content":"&lt;/&gt; type State = { _update: (State&lt;T&gt;) → boolean, _dependencies: Set&lt;State&lt;T&gt;&gt;, _dependents: Set&lt;State&lt;T&gt;&gt;, _binds: { [T]: any, _cleanup: List&lt;any&gt; }, _hooks: Dict&lt;Function&gt;, _value: T, _stateful: boolean, _operation: List&lt;any&gt;?, _tweenInfo: TweenInfo | any, set: ( self: State&lt;T&gt;, new: T, force: boolean?, noTween: boolean? ) → State&lt;T&gt;, get: (self: State&lt;T&gt;) → T, hook: ( self: State&lt;T&gt;, callback: Function ) → Function, Destroy: (self: State&lt;T&gt;) → (), bindToProperty: ( self: State&lt;T&gt;, instance: Instanceproperty: string ) → (), bindToAttribute: ( self: State&lt;T&gt;, instance: Instance , attribute: string ) → () } Represents a reactive state object in the Flux system  ","version":null,"tagName":"h3"},{"title":"Stateful<T>​","type":1,"pageTitle":"Flux","url":"/api/Flux#Stateful<T>","content":"&lt;/&gt; type Stateful&lt;T&gt; = T | State&lt;T&gt; A type for state or raw values  ","version":null,"tagName":"h3"},{"title":"SpecialKey​","type":1,"pageTitle":"Flux","url":"/api/Flux#SpecialKey","content":"&lt;/&gt; type SpecialKey = {type: &quot;SpecialKey&quot;} A type for state or raw values  ","version":null,"tagName":"h3"},{"title":"SpecialDefinition​","type":1,"pageTitle":"Flux","url":"/api/Flux#SpecialDefinition","content":"&lt;/&gt; type SpecialDefinition = {[number | string | SpecialKey]: unknown} Represents the definition used in Flux.new and Flux.edit  ","version":null,"tagName":"h3"},{"title":"Scope​","type":1,"pageTitle":"Flux","url":"/api/Flux#Scope","content":"&lt;/&gt; type Scope = {[any]=Scope | any}  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Flux","url":"/api/Flux#properties","content":" ","version":null,"tagName":"h2"},{"title":"Scope​","type":1,"pageTitle":"Flux","url":"/api/Flux#Scope","content":"&lt;/&gt; Flux.Scope: Scope A scope object for organizing and cleaning up Flux states  ","version":null,"tagName":"h3"},{"title":"Attribute​","type":1,"pageTitle":"Flux","url":"/api/Flux#Attribute","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flux.Attribute: SpecialKey A marker for defining Instance attributes in Flux.edit  ","version":null,"tagName":"h3"},{"title":"Children​","type":1,"pageTitle":"Flux","url":"/api/Flux#Children","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flux.Children: SpecialKey A marker for defining Instance children in Flux.edit  ","version":null,"tagName":"h3"},{"title":"Event​","type":1,"pageTitle":"Flux","url":"/api/Flux#Event","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flux.Event: SpecialKey &amp; { Attribute=SpecialKey, Property=SpecialKey } Markers for defining events in Flux.edit ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Flux","url":"/api/Flux#functions","content":" ","version":null,"tagName":"h2"},{"title":"isState​","type":1,"pageTitle":"Flux","url":"/api/Flux#isState","content":"&lt;/&gt; Flux.isState(object: any) → boolean Checks if an object is a Flux state  ","version":null,"tagName":"h3"},{"title":"peek​","type":1,"pageTitle":"Flux","url":"/api/Flux#peek","content":"&lt;/&gt; Flux.peek(object: T) → T Gets the current value of a Flux state or returns the input if it's not a state  ","version":null,"tagName":"h3"},{"title":"peekVariadic​","type":1,"pageTitle":"Flux","url":"/api/Flux#peekVariadic","content":"&lt;/&gt; Flux.peekVariadic(...: any) → ...any Gets the current values of multiple Flux states or non-state inputs  ","version":null,"tagName":"h3"},{"title":"edit​","type":1,"pageTitle":"Flux","url":"/api/Flux#edit","content":"&lt;/&gt; Flux.edit( instance: Instance , definition: SpecialDefinition &amp; Instance ) → Instance  Edits an existing Instance with Flux state bindings and other properties  ","version":null,"tagName":"h3"},{"title":"new​","type":1,"pageTitle":"Flux","url":"/api/Flux#new","content":"&lt;/&gt; Flux.new(className: string) → Flux.edit Creates a new Instance with Flux state bindings and other properties  ","version":null,"tagName":"h3"},{"title":"computeFrom​","type":1,"pageTitle":"Flux","url":"/api/Flux#computeFrom","content":"&lt;/&gt; Flux.computeFrom( computation: (...any) → T, ...: any ) → State&lt;T&gt; Creates a computed state based on other states or static values  ","version":null,"tagName":"h3"},{"title":"compute​","type":1,"pageTitle":"Flux","url":"/api/Flux#compute","content":"&lt;/&gt; Flux.compute(computation: (use: &lt;U&gt;(U | State&lt;U&gt;) → U?) → T) → State&lt;T&gt; Creates a computed state, passing a use function to access and bind other states  ","version":null,"tagName":"h3"},{"title":"tween​","type":1,"pageTitle":"Flux","url":"/api/Flux#tween","content":"&lt;/&gt; Flux.tween( tweenInfo: Stateful&lt;TweenInfo &gt;, state: State&lt;T&gt; ) → State&lt;T&gt; Applies TweenService tweens with Instance properties bound to the Flux state  ","version":null,"tagName":"h3"},{"title":"state​","type":1,"pageTitle":"Flux","url":"/api/Flux#state","content":"&lt;/&gt; Flux.state( initialValue: T | State&lt;T&gt; | Instance , property: string? ) → State&lt;T&gt; Creates a new Flux state with an initial value  ","version":null,"tagName":"h3"},{"title":"_addDependency​","type":1,"pageTitle":"Flux","url":"/api/Flux#_addDependency","content":"&lt;/&gt; Flux:_addDependency(dependency: State&lt;T&gt;) → () Adds a dependency to the current state  ","version":null,"tagName":"h3"},{"title":"_removeDependency​","type":1,"pageTitle":"Flux","url":"/api/Flux#_removeDependency","content":"&lt;/&gt; Flux:_removeDependency(dependency: State&lt;T&gt;) → () Removes a dependency from the current state  ","version":null,"tagName":"h3"},{"title":"_update​","type":1,"pageTitle":"Flux","url":"/api/Flux#_update","content":"&lt;/&gt; Flux:_update(noTween: boolean?) → () Updates the state and propagates changes to dependents  ","version":null,"tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"Flux","url":"/api/Flux#Destroy","content":"&lt;/&gt; Flux:Destroy() → () Destroys the state, clearing all dependencies and bindings  ","version":null,"tagName":"h3"},{"title":"hook​","type":1,"pageTitle":"Flux","url":"/api/Flux#hook","content":"&lt;/&gt; Flux:hook(callback: Function) → Function Adds a hook callback function to be called when the state changes  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"Flux","url":"/api/Flux#get","content":"&lt;/&gt; Flux:get() → any Gets the current value of the state  ","version":null,"tagName":"h3"},{"title":"set​","type":1,"pageTitle":"Flux","url":"/api/Flux#set","content":"&lt;/&gt; Flux:set( new: T, forceUpdate: boolean?, noTween: boolean? ) → State&lt;T&gt; Sets a new value for the state and triggers an update  ","version":null,"tagName":"h3"},{"title":"bindToProperty​","type":1,"pageTitle":"Flux","url":"/api/Flux#bindToProperty","content":"&lt;/&gt; Flux:bindToProperty( instance: Instance , property: string ) → () Binds the state to a property of an Instance  ","version":null,"tagName":"h3"},{"title":"bindToAttribute​","type":1,"pageTitle":"Flux","url":"/api/Flux#bindToAttribute","content":"&lt;/&gt; Flux:bindToAttribute( instance: Instance , attribute: string ) → () Binds the state to an attribute of an Instance ","version":null,"tagName":"h3"},{"title":"Remote","type":0,"sectionRef":"#","url":"/api/Remote","content":"Remote","keywords":"","version":null},{"title":"Registry","type":0,"sectionRef":"#","url":"/api/Registry","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Registry","url":"/api/Registry#types","content":" ","version":null,"tagName":"h2"},{"title":"ArgumentFunction​","type":1,"pageTitle":"Registry","url":"/api/Registry#ArgumentFunction","content":"&lt;/&gt; type ArgumentFunction = ( value: any, from: Player ) → ...any   ","version":null,"tagName":"h3"},{"title":"ArgumentDefinition​","type":1,"pageTitle":"Registry","url":"/api/Registry#ArgumentDefinition","content":"&lt;/&gt; type ArgumentDefinition = { type: string, name: string, description: string, optional: boolean?, lowerRank: boolean?, ignoreSelf: boolean?, shouldRequest: boolean? }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Registry","url":"/api/Registry#properties","content":" ","version":null,"tagName":"h2"},{"title":"types​","type":1,"pageTitle":"Registry","url":"/api/Registry#types","content":"&lt;/&gt; Registry.types: {[string]: ArgumentType}   ","version":null,"tagName":"h3"},{"title":"commands​","type":1,"pageTitle":"Registry","url":"/api/Registry#commands","content":"&lt;/&gt; Registry.commands: {[string]: CommandDefinition}   ","version":null,"tagName":"h3"},{"title":"commandsList​","type":1,"pageTitle":"Registry","url":"/api/Registry#commandsList","content":"&lt;/&gt; Registry.commandsList: {CommandDefinition}  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Registry","url":"/api/Registry#functions","content":" ","version":null,"tagName":"h2"},{"title":"makeEnumType​","type":1,"pageTitle":"Registry","url":"/api/Registry#makeEnumType","content":"&lt;/&gt; Registry.makeEnumType( typeName: string, enumItems: {EnumItem | string} ) → () Makes an Enum command type definition  ","version":null,"tagName":"h3"},{"title":"registerType​","type":1,"pageTitle":"Registry","url":"/api/Registry#registerType","content":"&lt;/&gt; Registry.registerType( name: string, typeObject: ArgumentType, override: Dict? ) → () ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Registry","url":"/api/Registry##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Registry","url":"/api/Registry#ArgumentType","content":"type ArgumentType = { name: string, displayName: string?, listable: boolean?, transform: ArgumentFunction?, validate: ArgumentFunction, parse: ArgumentFunction, preParse: ArgumentFunction?, postParse: ArgumentFunction?, suggestions: ArgumentFunction?, prefixes: {[string]: string}? }  Registers a command type  ","version":null,"tagName":"h3"},{"title":"registerCommand​","type":1,"pageTitle":"Registry","url":"/api/Registry#registerCommand","content":"&lt;/&gt; Registry.registerCommand( _K: any, commandObject: CommandDefinition ) → () ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Registry","url":"/api/Registry##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Registry","url":"/api/Registry#CommandDefinition","content":"type CommandDefinition = { name: string, aliases: {string}?, description: string, group: string, args: {ArgumentDefinition}, envClient: {} | () → {}?, env: {} | () → {}?, runClient: (...any) → ()?, run: (...any) → ()? }  Registers a command  ","version":null,"tagName":"h3"},{"title":"registerCommandAlias​","type":1,"pageTitle":"Registry","url":"/api/Registry#registerCommandAlias","content":"&lt;/&gt; Registry.registerCommandAlias( _K: any, alias: string, command: string ) → () Registers a local command alias  ","version":null,"tagName":"h3"},{"title":"registerCommandModule​","type":1,"pageTitle":"Registry","url":"/api/Registry#registerCommandModule","content":"&lt;/&gt; Registry.registerCommandModule( _K: any, commandModule: ModuleScript ) → () Registers a list of commands with the module name as the command group ","version":null,"tagName":"h3"},{"title":"Util","type":0,"sectionRef":"#","url":"/api/Util","content":"Util","keywords":"","version":null},{"title":"String","type":0,"sectionRef":"#","url":"/api/String","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"String","url":"/api/String#functions","content":" ","version":null,"tagName":"h2"},{"title":"escapePattern​","type":1,"pageTitle":"String","url":"/api/String#escapePattern","content":"&lt;/&gt; String.escapePattern(s: string) → string Escape magic string pattern characters: % . ( ) [ ] + - * ? ^ $  ","version":null,"tagName":"h3"},{"title":"escapeRichText​","type":1,"pageTitle":"String","url":"/api/String#escapeRichText","content":"&lt;/&gt; String.escapeRichText(s: string) → string Escape RichText tags  ","version":null,"tagName":"h3"},{"title":"unescapeRichText​","type":1,"pageTitle":"String","url":"/api/String#unescapeRichText","content":"&lt;/&gt; String.unescapeRichText(s: string) → string Unescape RichText tags  ","version":null,"tagName":"h3"},{"title":"filterForBroadcast​","type":1,"pageTitle":"String","url":"/api/String#filterForBroadcast","content":"&lt;/&gt; String.filterForBroadcast( message: string, fromUserId: number, filterContext: Enum.TextFilterContext? ) → string Filters a message with TextService.FilterStringAsync for broadcast messages  ","version":null,"tagName":"h3"},{"title":"filterForUser​","type":1,"pageTitle":"String","url":"/api/String#filterForUser","content":"&lt;/&gt; String.filterForUser( message: string, fromUserId: number, toUserId: number, filterContext: Enum.TextFilterContext? ) → string Filters a message with TextService.FilterStringAsync ","version":null,"tagName":"h3"},{"title":"Custom Commands","type":0,"sectionRef":"#","url":"/docs/custom_commands","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Custom Commands","url":"/docs/custom_commands#prerequisites","content":" Make sure you have Kohl's Admin: Ensure that Kohl's Admin is present in your experience.Addons Folder: Confirm that Kohl's Admin has a folder named Addons. This is where you'll place your custom command scripts.  ","version":"Next","tagName":"h2"},{"title":"Addon Setup​","type":1,"pageTitle":"Custom Commands","url":"/docs/custom_commands#addon-setup","content":" All custom commands are part of an Addon. For this section we will create addons that only create custom commands, but in later parts we will show the extent of what addons can do.  All addons are a ModuleScript that returns a function. To start, create a module script and inside of it write the following:  return function(_K) -- Addon code goes here! end   Inside of this function is where we will be adding our custom commands. The name of the addon can be anything, but for this example we encourage &quot;customCommands&quot;.  danger Adding Client or Server an Addon file's name will make it only run in that context. This will make the other context unaware of the command!  ","version":"Next","tagName":"h2"},{"title":"Creating a Custom Command​","type":1,"pageTitle":"Custom Commands","url":"/docs/custom_commands#creating-a-custom-command","content":" To create a custom command, you must register it with the Registry, using registerCommand().  Using this, our module becomes:  return function(_K) _K.Registry.registerCommand(_K, commandDefinition) end   commandDefinition is a placeholder for the real contents of our command! Commands require a lot of information, structured in a commandDefinition.  type commandDefinition { name: string, -- Name of the command. aliases: { string }?, -- Table of aliases. description: string, -- Description of what the command does. group: string, -- What group the command belongs to. args: { ArgumentDefinition }, -- A table of argument definitions. envClient: {} | () -&gt; {}?, -- Sets up an environment for the command. env: {} | () -&gt; {}?, -- Sets up an environment for the command. runClient: (...any) -&gt; ()?, -- What runs on the client of the player that ran the command. run: (...any) -&gt; ()? -- What the command runs on the server. }   To give an example, this is the code from the ExampleAddon:  -- addons not containing in &quot;Client&quot; or &quot;Server&quot; will run in both contexts (shared) return function(_K) _K.log(`Hello World from ExampleAddon!`, &quot;INFO&quot;) _K.Registry.registerCommand(_K, { name = &quot;customcommand&quot;, aliases = { &quot;customcommandalias&quot;, &quot;customcommandalias2&quot; }, description = &quot;Custom command description.&quot;, -- The command group to sort the command by, this is what roles use to easily assign groups of commands. -- Default groups in order of abusability are &quot;Utility&quot;, &quot;Environment&quot;, &quot;General&quot;, &quot;Fun&quot;, &quot;Moderation&quot;, &quot;Administration&quot;, and &quot;Creator&quot; group = &quot;General&quot;, -- Command group to use. -- Argument definitions args = { { type = &quot;stringGreedy&quot;, name = &quot;Message&quot;, description = &quot;The message to send.&quot;, -- Description shown in command listings. -- If the command is optional, make sure to check if it's nil and not false! optional = true, lowerRank = false, ignoreSelf = false, shouldRequest = false, }, }, -- Command environment env = function(_K) -- This will only run once on each server _K.log(`Hello World from ExampleAddon customcommand env!`, &quot;INFO&quot;) -- This table is passed to the `run` function as `context.env` return { countServer = 0, } end, envClient = function(_K) -- This will only run once on each client _K.log(`Hello World from ExampleAddon customcommand envClient!`, &quot;INFO&quot;) -- This table is passed to the `runClient` function as `context.env` return { countClient = 0, } end, -- Command execution -- Function that runs on the server run = function(context, message: string?) print(&quot;Custom command ran on server!&quot;, context, message) -- Create a simple Roblox message object local messageInstance = Instance.new(&quot;Message&quot;, workspace) -- Since our message is optional we need to check for context.OPTIONAL messageInstance.Text = if message == context.OPTIONAL then &quot;Default message&quot; else message -- This will destroy the message after 5 seconds task.delay(5, messageInstance.Destroy, messageInstance) -- Number of times the command has been used on this server context.env.countServer += 1 end, -- Function that runs on the player's client runClient = function(context, message) print(&quot;Custom command ran on the client!&quot;, context, message) -- Number of times the command has been used on this client context.env.countClient += 1 end, }) end   This command creates a Message instance and populates it with the player provided message. As you can see, the command is registered with a dictionary that lists all information about the command.  tip You can put multiple custom commands in one addon! All you need to do is register multiple commands in the same module.  In later sections, we'll cover more advanced uses of custom commands, including environments and other advanced functionality. ","version":"Next","tagName":"h2"},{"title":"Installation","type":0,"sectionRef":"#","url":"/docs/getting-started/installation","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Installation","url":"/docs/getting-started/installation#prerequisites","content":" Make sure you have Roblox Studio installed on your environment.  Roblox Studio: Download and install Roblox Studio  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Installation","url":"/docs/getting-started/installation#installation-1","content":" danger Be aware of models impersonating Kohl's Admin. The model should only be made by @Scripth. Unofficial models may contain unwanted content such as, but not limited to: viruses, backdoors, unwanted admins.  ","version":"Next","tagName":"h2"},{"title":"Step 1: Acquire the KA Official Loader Model​","type":1,"pageTitle":"Installation","url":"/docs/getting-started/installation#step-1-acquire-the-ka-official-loader-model","content":" Go to the KA Official Loader page.Click the Get Model button to add the model to your inventory.  ","version":"Next","tagName":"h3"},{"title":"Step 2: Open Roblox Studio​","type":1,"pageTitle":"Installation","url":"/docs/getting-started/installation#step-2-open-roblox-studio","content":" Launch Roblox Studio on your computer.Open the experience you want to install the KA Loader in or create a new experience.  ","version":"Next","tagName":"h3"},{"title":"Step 3: Import the KA Official Loader Model​","type":1,"pageTitle":"Installation","url":"/docs/getting-started/installation#step-3-import-the-ka-official-loader-model","content":" In Roblox Studio, open the Toolbox by selecting View &gt; Toolbox from the top menu.In the Toolbox, click on the Inventory tab and search for Kohl's Admin [BETA] and click on the model.Click OK on the script warning prompt.Once the KA Loader model is in place, save your changes by selecting File &gt; Publish to Roblox.You may also participate in Kohl's Game Hub, by going clicking on Game Settings, then going to Security &gt; Allow HTTP Requests. This is completely optional.  ","version":"Next","tagName":"h3"},{"title":"Step 4: Verify Installation​","type":1,"pageTitle":"Installation","url":"/docs/getting-started/installation#step-4-verify-installation","content":" Open and play the experience that you've imported the model into.Test some basic commands to make sure the admin commands are functioning as expected.    tip Still need help? Feel free to join the Kohl's Admin Discord! ","version":"Next","tagName":"h3"},{"title":"UI","type":0,"sectionRef":"#","url":"/api/UI","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"UI","url":"/api/UI#types","content":" ","version":null,"tagName":"h2"},{"title":"Platform​","type":1,"pageTitle":"UI","url":"/api/UI#Platform","content":"&lt;/&gt; type Platform = &quot;Console&quot; | &quot;Mobile&quot; | &quot;PC&quot;   ","version":null,"tagName":"h3"},{"title":"ActiveStateType​","type":1,"pageTitle":"UI","url":"/api/UI#ActiveStateType","content":"&lt;/&gt; type ActiveStateType = &quot;hover&quot; | &quot;floating&quot;   ","version":null,"tagName":"h3"},{"title":"Theme​","type":1,"pageTitle":"UI","url":"/api/UI#Theme","content":"&lt;/&gt; interface Theme { ClackAll: State&lt;boolean&gt; ClackEnabled: State&lt;boolean&gt; Transparency: State&lt;number&gt; Primary: State&lt;Color3 &gt; PrimaryText: State&lt;Color3 &gt; Secondary: State&lt;Color3 &gt; SecondaryText: State&lt;Color3 &gt; Muted: State&lt;Color3 &gt; MutedText: State&lt;Color3 &gt; Border: State&lt;Color3 &gt; BorderMuted: State&lt;Color3 &gt; Valid: State&lt;Color3 &gt; Invalid: State&lt;Color3 &gt; FontSize: State&lt;number&gt; Font: State&lt;Font &gt; FontMono: State&lt;Font &gt; FontHeavy: State&lt;Font &gt; FontBold: State&lt;Font &gt; FontSemiBold: State&lt;Font &gt; FontLight: State&lt;Font &gt; CornerRadius: State&lt;UDim &gt; CornerHalf: State&lt;UDim &gt; CornerDiameter: State&lt;UDim &gt; Padding: State&lt;UDim &gt; PaddingHalf: State&lt;UDim &gt; PaddingDouble: State&lt;UDim &gt; StrokeEnabled: State&lt;boolean&gt; NormalTween: State&lt;TweenInfo &gt; TransparencyClamped: State&lt;number&gt; ScrollMidImage: State&lt;string&gt; ScrollTopImage: State&lt;string&gt; ScrollBottomImage: State&lt;string&gt; } A directory of Flux state for UI components to use as theme variables ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"UI","url":"/api/UI#properties","content":" ","version":null,"tagName":"h2"},{"title":"GuiService​","type":1,"pageTitle":"UI","url":"/api/UI#GuiService","content":"&lt;/&gt; UI.GuiService: GuiService    ","version":null,"tagName":"h3"},{"title":"TextService​","type":1,"pageTitle":"UI","url":"/api/UI#TextService","content":"&lt;/&gt; UI.TextService: TextService    ","version":null,"tagName":"h3"},{"title":"UserInputService​","type":1,"pageTitle":"UI","url":"/api/UI#UserInputService","content":"&lt;/&gt; UI.UserInputService: UserInputService    ","version":null,"tagName":"h3"},{"title":"LocalPlayer​","type":1,"pageTitle":"UI","url":"/api/UI#LocalPlayer","content":"&lt;/&gt; UI.LocalPlayer: Player    ","version":null,"tagName":"h3"},{"title":"PlayerGui​","type":1,"pageTitle":"UI","url":"/api/UI#PlayerGui","content":"&lt;/&gt; UI.PlayerGui: PlayerGui    ","version":null,"tagName":"h3"},{"title":"Touch​","type":1,"pageTitle":"UI","url":"/api/UI#Touch","content":"&lt;/&gt; UI.Touch: boolean   ","version":null,"tagName":"h3"},{"title":"Platform​","type":1,"pageTitle":"UI","url":"/api/UI#Platform","content":"&lt;/&gt; UI.Platform: Platform   ","version":null,"tagName":"h3"},{"title":"Attribute​","type":1,"pageTitle":"UI","url":"/api/UI#Attribute","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Attribute: newproxy A marker for defining Instance attributes in UI.edit  ","version":null,"tagName":"h3"},{"title":"Children​","type":1,"pageTitle":"UI","url":"/api/UI#Children","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Children: newproxy A marker for defining Instance children in UI.edit  ","version":null,"tagName":"h3"},{"title":"Event​","type":1,"pageTitle":"UI","url":"/api/UI#Event","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Event: { Attribute=newproxy, Property=newproxy } Markers for defining events in UI.edit  ","version":null,"tagName":"h3"},{"title":"Hook​","type":1,"pageTitle":"UI","url":"/api/UI#Hook","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Hook: newproxy A marker for defining UI state hooks in UI.edit  ","version":null,"tagName":"h3"},{"title":"Nil​","type":1,"pageTitle":"UI","url":"/api/UI#Nil","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Nil: newproxy A marker for defining Nil defaultState in UI.makeStatefulDefaults  ","version":null,"tagName":"h3"},{"title":"Scope​","type":1,"pageTitle":"UI","url":"/api/UI#Scope","content":"&lt;/&gt; UI.Scope: Scope A scope object for organizing and cleaning up UI states  ","version":null,"tagName":"h3"},{"title":"TopbarInset​","type":1,"pageTitle":"UI","url":"/api/UI#TopbarInset","content":"&lt;/&gt; UI.TopbarInset: State&lt;Rect &gt; GuiService.TopbarInset as a Flux state  ","version":null,"tagName":"h3"},{"title":"LayerBottom​","type":1,"pageTitle":"UI","url":"/api/UI#LayerBottom","content":"&lt;/&gt; UI.LayerBottom: State&lt;ScreenGui &gt; The lowermost ScreenGui for UI components  ","version":null,"tagName":"h3"},{"title":"LayerDefault​","type":1,"pageTitle":"UI","url":"/api/UI#LayerDefault","content":"&lt;/&gt; UI.LayerDefault: State&lt;ScreenGui &gt; The default ScreenGui for UI components  ","version":null,"tagName":"h3"},{"title":"LayerTop​","type":1,"pageTitle":"UI","url":"/api/UI#LayerTop","content":"&lt;/&gt; UI.LayerTop: State&lt;ScreenGui &gt; The topmost ScreenGui for UI components  ","version":null,"tagName":"h3"},{"title":"LayerTopbar​","type":1,"pageTitle":"UI","url":"/api/UI#LayerTopbar","content":"&lt;/&gt; UI.LayerTopbar: State&lt;ScreenGui &gt; The Topbar ScreenGui for UI components  ","version":null,"tagName":"h3"},{"title":"TopbarFrame​","type":1,"pageTitle":"UI","url":"/api/UI#TopbarFrame","content":"&lt;/&gt; UI.TopbarFrame: State&lt;Frame &gt; A sorted Topbar Frame for UI components, parented under UI.LayerTopbar ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"UI","url":"/api/UI#functions","content":" ","version":null,"tagName":"h2"},{"title":"activateState​","type":1,"pageTitle":"UI","url":"/api/UI#activateState","content":"&lt;/&gt; UI.activateState( activeState: State&lt;boolean&gt;, stateType: ActiveStateType ) → () A generalized function to handle activation/deactivation of both floating and hover states  ","version":null,"tagName":"h3"},{"title":"deactivateState​","type":1,"pageTitle":"UI","url":"/api/UI#deactivateState","content":"&lt;/&gt; UI.deactivateState( activeState: State&lt;boolean&gt;, stateType: ActiveStateType ) → () A generalized function to deactivate both floating and hover states  ","version":null,"tagName":"h3"},{"title":"toggleState​","type":1,"pageTitle":"UI","url":"/api/UI#toggleState","content":"&lt;/&gt; UI.toggleState( activeState: State&lt;boolean&gt;, stateType: ActiveStateType ) → () A generalized function to toggle both floating and hover states  ","version":null,"tagName":"h3"},{"title":"clearState​","type":1,"pageTitle":"UI","url":"/api/UI#clearState","content":"&lt;/&gt; UI.clearState(stateType: ActiveStateType) → () Function to clear a specific state type  ","version":null,"tagName":"h3"},{"title":"getLuminance​","type":1,"pageTitle":"UI","url":"/api/UI#getLuminance","content":"&lt;/&gt; UI.getLuminance(color: Color3 ) → number Gets the luminance of a Color3  ","version":null,"tagName":"h3"},{"title":"invertLuminance​","type":1,"pageTitle":"UI","url":"/api/UI#invertLuminance","content":"&lt;/&gt; UI.invertLuminance( color: Color3 , amount: number ) → Color3  Inverts the luminance of a Color3 by an amount  ","version":null,"tagName":"h3"},{"title":"pointInGuiObject​","type":1,"pageTitle":"UI","url":"/api/UI#pointInGuiObject","content":"&lt;/&gt; UI.pointInGuiObject( x: number, y: number, object: GuiObject ) → () Checks if x, y is within the absolute bounds of the GuiObject  ","version":null,"tagName":"h3"},{"title":"makeStatefulDefaults​","type":1,"pageTitle":"UI","url":"/api/UI#makeStatefulDefaults","content":"&lt;/&gt; UI.makeStatefulDefaults( default: Dict&lt;any&gt;, definition: SpecialDefinition? ) → () Helper function for defining Flux state defaults  ","version":null,"tagName":"h3"},{"title":"edit​","type":1,"pageTitle":"UI","url":"/api/UI#edit","content":"&lt;/&gt; UI.edit( new: Instance | Dict&lt;any&gt;, definition: SpecialDefinition | GuiObject ) → Instance | Dict&lt;any&gt; Inherits Flux.edit Parents children to the ._content variable of a UI component if one exists Numeric indicies are defined as children with GuiObject.LayoutOrder set to the index Allows UI.Hook to easily hook to default UI state or RBXScriptSignal aliases  ","version":null,"tagName":"h3"},{"title":"new​","type":1,"pageTitle":"UI","url":"/api/UI#new","content":"&lt;/&gt; UI.new(className: string) → UI.edit Creates a new Instance with UI.edit  ","version":null,"tagName":"h3"},{"title":"register​","type":1,"pageTitle":"UI","url":"/api/UI#register","content":"&lt;/&gt; UI.register( className: string, class: Dict&lt;any&gt; ) → () Registers a new UI component class  ","version":null,"tagName":"h3"},{"title":"registerDefaultClasses​","type":1,"pageTitle":"UI","url":"/api/UI#registerDefaultClasses","content":"&lt;/&gt; UI.registerDefaultClasses() → typeof(UI) Run to register all default classes in the UI module ","version":null,"tagName":"h3"},{"title":"Legacy Loader","type":0,"sectionRef":"#","url":"/docs/getting-started/legacy_loader","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Legacy Loader","url":"/docs/getting-started/legacy_loader#prerequisites","content":" Make sure you already have KA installed in your game before continuing.  KA Installation Guide: Click here to go to the setup guide.  Also ensure that you have both the Explorer and Properties tabs open.  You can do this by going to View on the menu of Roblox Studio, and toggle Explorer and Properties which is on the top left.  warning There will be 2 Settings scripts, one inside the Legacy_Loader script and the other in the model, it is DIFFERENT and will not save with one another.  ","version":"Next","tagName":"h2"},{"title":"Changing to Legacy Loader​","type":1,"pageTitle":"Legacy Loader","url":"/docs/getting-started/legacy_loader#changing-to-legacy-loader","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1: Enabling the Legacy Loader​","type":1,"pageTitle":"Legacy Loader","url":"/docs/getting-started/legacy_loader#step-1-enabling-the-legacy-loader","content":" Open the KA Model (Kohl's Admin)Click on Legacy_Loader.Go to the Properties tab, going to Behaviour &gt; Enabled and toggling it to true (white check mark).  ","version":"Next","tagName":"h3"},{"title":"Step 2: Disabling the New Loader​","type":1,"pageTitle":"Legacy Loader","url":"/docs/getting-started/legacy_loader#step-2-disabling-the-new-loader","content":" Open the KA Model (Kohl's Admin)Click on Loader.Go to the Properties tab, going to Behaviour &gt; Enabled and toggling it to false (no check mark).  ","version":"Next","tagName":"h3"},{"title":"Changing back to New Loader​","type":1,"pageTitle":"Legacy Loader","url":"/docs/getting-started/legacy_loader#changing-back-to-new-loader","content":" ","version":"Next","tagName":"h2"},{"title":"Step 1: Enabling the New Loader​","type":1,"pageTitle":"Legacy Loader","url":"/docs/getting-started/legacy_loader#step-1-enabling-the-new-loader","content":" Open the KA Model (Kohl's Admin)Click on Loader.Go to the Properties tab, going to Behaviour &gt; Enabled and toggling it to true (white check mark).  ","version":"Next","tagName":"h3"},{"title":"Step 2: Disabling the Legacy Loader​","type":1,"pageTitle":"Legacy Loader","url":"/docs/getting-started/legacy_loader#step-2-disabling-the-legacy-loader","content":" Open the KA Model (Kohl's Admin)Click on Legacy_Loader.Go to the Properties tab, going to Behaviour &gt; Enabled and toggling it to false (no check mark).  ","version":"Next","tagName":"h3"},{"title":"Verify Installation​","type":1,"pageTitle":"Legacy Loader","url":"/docs/getting-started/legacy_loader#verify-installation","content":" Open and play the experience that you've imported the model into.Test some basic commands to make sure the admin commands are functioning as expected.    tip Still need help? Feel free to join the Kohl's Admin Discord! ","version":"Next","tagName":"h2"},{"title":"Using Commands","type":0,"sectionRef":"#","url":"/docs/getting-started/using_commands","content":"","keywords":"","version":"Next"},{"title":"Information​","type":1,"pageTitle":"Using Commands","url":"/docs/getting-started/using_commands#information","content":" You can change the prefix by the in-game settings UI, or in the Settings script which is shown in the configuration guide.You can also run ;cmds to see the commands that you can use.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Using Commands","url":"/docs/getting-started/using_commands#prerequisites","content":" Make sure you already have KA installed in your game before continuing.  KA Installation Guide: Click here to go to the setup guide.  ","version":"Next","tagName":"h2"},{"title":"Legacy Loader​","type":1,"pageTitle":"Using Commands","url":"/docs/getting-started/using_commands#legacy-loader","content":" ","version":"Next","tagName":"h2"},{"title":"Using the Commandbar​","type":1,"pageTitle":"Using Commands","url":"/docs/getting-started/using_commands#using-the-commandbar","content":" The commandbar is for PC Users only.  Press ; on your keyboard to open the commandbar.Type out the command you wish to use without the prefix, or with the prefix, and the required information.  You can type out more commands by running multiple commands with the prefix, example: ;size me 2 ;fly me  Press enter on your keyboard to run the command.  ","version":"Next","tagName":"h3"},{"title":"Using the Roblox Chat​","type":1,"pageTitle":"Using Commands","url":"/docs/getting-started/using_commands#using-the-roblox-chat","content":" Press / on your keyboard to open the chat.  If you wish to hide your command in the chat, type /e before the command.  Type out the command you wish to use with the prefix, and the required information.  You can type out more commands by running multiple commands with the prefix, example: ;size me 2 ;fly me  Press enter on your keyboard to run the command.  ","version":"Next","tagName":"h3"},{"title":"New Loader​","type":1,"pageTitle":"Using Commands","url":"/docs/getting-started/using_commands#new-loader","content":" ","version":"Next","tagName":"h2"},{"title":"Using the Commandbar​","type":1,"pageTitle":"Using Commands","url":"/docs/getting-started/using_commands#using-the-commandbar-1","content":" The commandbar is for PC Users only.  Press ; on your keyboard to open the commandbar.Type out the command you wish to use, the prefix should already be loaded, and the required information.  You can type out more commands by running multiple commands with the prefix, example: ;size me 2 ;fly me  Press enter on your keyboard to run the command.  ","version":"Next","tagName":"h3"},{"title":"Using the Roblox Chat​","type":1,"pageTitle":"Using Commands","url":"/docs/getting-started/using_commands#using-the-roblox-chat-1","content":" Press / on your keyboard to open the chat.  If you wish to hide your command in the chat, type /e before the command.  Type out the command you wish to use with the prefix, and the required information.  You can type out more commands by running multiple commands with the prefix, example: ;size me 2 ;fly me  Press enter on your keyboard to run the command.    tip Still need help? Feel free to join the Kohl's Admin Discord! ","version":"Next","tagName":"h3"},{"title":"Using UIs","type":0,"sectionRef":"#","url":"/docs/getting-started/using_uis","content":"","keywords":"","version":"Next"},{"title":"Information​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#information","content":" You can change the prefix by the in-game settings UI, or in the Settings script which is shown in the configuration guide.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#prerequisites","content":" Make sure you already have KA installed in your game before continuing.  KA Installation Guide: Click here to go to the setup guide.  ","version":"Next","tagName":"h2"},{"title":"Legacy Loader's UIs​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#legacy-loaders-uis","content":" ","version":"Next","tagName":"h2"},{"title":"Opening/Closing the UIs​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#openingclosing-the-uis","content":" There is 6 total UIs in the legacy system which can be opened with commands.  ;help -- overview of the system ;credit -- credits ;settings -- settings ;bans -- user/s banned ;tools -- tools in ServerStorage ;admins -- people with admin ranks offline or currently in your game   It can be closed by using the X button, or minimized by the - button.  ","version":"Next","tagName":"h3"},{"title":"Help UI​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#help-ui","content":" The help UI lists out the prefix, what you can do, how to change settings (for devs), how to ban people, and the options on using commands.It also lists our server below, which you can join.  ","version":"Next","tagName":"h3"},{"title":"Credit UI​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#credit-ui","content":" The Credit UI lists out the admin creator's username, the model, donation options, and our server.You can get the model by using the Get it Now! button.It also lists out our donation options which have different perks, listed in our server or FAQ.It lists our server below, which you can join.  ","version":"Next","tagName":"h3"},{"title":"Settings UI​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#settings-ui","content":" The Settings UI lists out the options which only the Super Admin can change.This also can be found in the Settings script under Legacy_Loader  ","version":"Next","tagName":"h3"},{"title":"Bans UI​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#bans-ui","content":" The Bans UI lists out the banned user's username, and the duration.You cannot unban via the UI and must run unban [player] to unban them.  ","version":"Next","tagName":"h3"},{"title":"Tools UI​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#tools-ui","content":" The Tools UI lists out the tools which can be found in ServerStorage.You cannot give yourself tools via the UI and must run give [player] [string] in order to give someone tools.  ","version":"Next","tagName":"h3"},{"title":"Admins UI​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#admins-ui","content":" The Admins UI lists out the players with admin ranks currently or offline in your game.It lists out their username, and their rank.You cannot rank someone from the UI and must run the commands: vip [player], mod [player], admin [player], superadmin [player] in order to rank them. You can put temp in front of the command in order to give them a temporary rank which resets when they leave. You can also give ranks from the Settings script under Legacy_Loader which can only be removed via the script.You cannot unrank someone from the UI and must run the commands: unvip [player], unmod [player], unadmin [player], unsuperadmin [player] in order to unrank them.  ","version":"Next","tagName":"h3"},{"title":"New Loader's Dashboard​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#new-loaders-dashboard","content":" ","version":"Next","tagName":"h2"},{"title":"Opening/Closing the Dashboard​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#openingclosing-the-dashboard","content":" You can open the Dashboard at the top of your screen near the Roblox menu.You can close the Dashboard by clicking on the X button on the UI or press on the X button on mobile.There is also a commandbar button next to the X which you can use to run commands.  ","version":"Next","tagName":"h3"},{"title":"Commands Section​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#commands-section","content":" The commands section lists out all the commands that you can use.It lists the default command, the alternatives, the required information and the description.It also has an search feature to allow you to search for specific commands.You can also hover your cursor (on pc) or hold your finger (on mobile) on a command to learn more about it.  ","version":"Next","tagName":"h3"},{"title":"Bans Section​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#bans-section","content":" The bans section lists out all the bans that has been done in your game.It also has an search feature to allow you to search for specific users.It lists out their username, userID, the reason, and the duration.You can unban players by pressing X next to the duration, which will give you a prompt to unban them below, which you can X to cancel, or ✔ to unban.  ","version":"Next","tagName":"h3"},{"title":"Members Section​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#members-section","content":" The members section lists out all the admins, or vips currently or offline (if saved) in your game.It lists out their username, userID, and their rank.It also has an search feature to allow you to search for specific users.  ","version":"Next","tagName":"h3"},{"title":"Logs Section​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#logs-section","content":" The logs section lists out all the developer logs, messages sent, commands ran, joins and leaves, kills and deaths, user damages, and purchases made in your game. It does not save throughout servers or the game.It lists info like the date, time, type of logs, username and description.It also has an search feature to allow you to search for specific informations.  ","version":"Next","tagName":"h3"},{"title":"Settings Section​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#settings-section","content":" The settings section lists out the options you can change for the game, or yourself.It also has an search feature to allow you to search for specific options.Super Admins may change settings throughout the game for everyone, which will save throughout servers.Regular players may change settings for themselves locally, but will not save once they leave.  ","version":"Next","tagName":"h3"},{"title":"About Section​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#about-section","content":" The about section lists out the version, yourself, the prefix, the commandbar hotkey, the dashboard hotkey, our server, and the credits.Thank you to those who contributes to the admin system, and thank you for using the system.  ","version":"Next","tagName":"h3"},{"title":"VIP Section​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#vip-section","content":" The VIP section lists out the options to donate to us, to better improve the system. Thank you for supporting!Our UGC avatar items is listed there which can help us to improve things better for you which has perks!Our VIP subscription which allows you to have VIP commands in participating games!Our donation items which doesn't have perks (sorry), but it lets us make things better for everyone!Our model which is free for everyone to use for their own game!    tip Still need help? Feel free to join the Kohl's Admin Discord! ","version":"Next","tagName":"h3"},{"title":"Configuration","type":0,"sectionRef":"#","url":"/docs/getting-started/configuration","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#prerequisites","content":" Make sure you already have KA installed in your game before continuing.  KA Installation Guide: Click here to go to the setup guide.  Also ensure that you have both the Explorer and Properties tabs open.  You can do this by going to View on the menu of Roblox Studio, and toggle Explorer and Properties which is on the top left.  warning There will be 2 Settings scripts, one inside the Legacy_Loader script and the other in the model, it is DIFFERENT and will not save with one another.  ","version":"Next","tagName":"h2"},{"title":"Hierarchy of Admin Powers​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#hierarchy-of-admin-powers","content":" Legacy Loader:   Admin Powers 0 Player 1 VIP Can use nonabusive commands only on self 2 Moderator Can kick, mute, &amp; use most commands 3 Administrator Can ban, crash, &amp; set Moderators/VIP 4 SuperAdmin Can grant permanent powers, &amp; shutdown the game 5 Owner Can set SuperAdmins, &amp; use all the commands 6 Game Creator Can set owners &amp; use all the commands   New Loader:  The new loader does not stack admin perks, they are now separated by default.   0\tdefaultRole 1\tvip 2\tmod 3\tadmin 4\tsuperadmin 5\tcreator   ","version":"Next","tagName":"h2"},{"title":"Types of Identifiers​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#types-of-identifiers","content":" UserID: 44391621 (Example)  You can find the UserID from a profile link on Roblox. Example: https://www.roblox.com/users/44391621/profile  Username: Scripth (Example)  You can find the Username from a profile on Roblox.  GroupID: 3403354 (Example)  You can find the GroupID from a group link on Roblox. Example: https://www.roblox.com/groups/3403354/Kohl  Group Rank: 0-255  You can find the Group Ranks in your group's configuration page by selecting Configure Group on your group page then Roles &gt; Role &gt; Rank  ItemID: 18966788838 (Example)  You can find the ItemID from marketplace items such as hats, shirts, pants, etc, using the link. Example: https://www.roblox.com/catalog/18966788838/Light-Crown  GamepassID: 5411126 (Example)  You can find the GamepassID from a game that has gamepasses, using the link. Example: https://www.roblox.com/game-pass/5411126/Premium-Donation  ","version":"Next","tagName":"h2"},{"title":"Configuring the Legacy Loader​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#configuring-the-legacy-loader","content":" ","version":"Next","tagName":"h2"},{"title":"Banning Someone from Joining​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#banning-someone-from-joining","content":" Unedited Script:  local Banned = { &quot;someoneyoudislike&quot; } -- For those who have wronged you, &amp; this guy   You can add more people or a single player by adding their Username or UserID. The list is endless.  local Banned = { &quot;someoneyoudislike&quot;, &quot;Roblox&quot;, 1234567 } -- For those who have wronged you, &amp; this guy   ","version":"Next","tagName":"h3"},{"title":"Adding Someone to your Admin List​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#adding-someone-to-your-admin-list","content":" Unedited Script:  local Owners = {} -- Can set SuperAdmins, &amp; use all the commands local SuperAdmins = {} -- Can set permanent admins, &amp; shutdown the game local Admins = {} -- Can ban, crash, &amp; set Moderators/VIP local Mods = {} -- Can kick, mute, &amp; use most commands local VIP = {} -- Can use nonabusive commands only on self   You can add more people or a single player by adding their Username or UserID. The list is endless.  local Owners = {&quot;someoneyoudislike&quot;, &quot;Roblox&quot;, 1234567} -- Can set SuperAdmins, &amp; use all the commands ...   ","version":"Next","tagName":"h3"},{"title":"Settings​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#settings","content":" This part should be pretty self explantory. The things they do are noted next to them.  local Settings = { -- Style Options Flat = true, -- Enables Flat theme / Disables Aero theme ForcedColor = false, -- Forces everyone to have set color &amp; transparency Color = Color3.new(0, 0, 0), -- Changes the Color of the user interface ColorTransparency = 0.75, -- Changes the Transparency of the user interface Chat = false, -- Enables the custom chat BubbleChat = false, -- Enables the custom bubble chat -- Basic Settings AdminCredit = true, -- Enables the credit GUI for that appears in the bottom right AutoClean = false, -- Enables automatic cleaning of hats &amp; tools in the Workspace AutoCleanDelay = 60, -- The delay between each AutoClean routine CommandBar = true, -- Enables the Command Bar | GLOBAL KEYBIND: \\ FunCommands = true, -- Enables fun yet unnecessary commands FreeAdmin = false, -- Set to 1-5 to grant admin powers to all, otherwise set to false JoinMessage = true, -- Shows an admin message on join with the prefix and your current rank PublicLogs = false, -- Allows all users to see the command &amp; chat logs Prefix = &quot;;&quot;, -- Character to begin a command }   ","version":"Next","tagName":"h3"},{"title":"Adding a Group to your Admin List​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#adding-a-group-to-your-admin-list","content":" This part should also be pretty self explantory as well, the required information is stated below the spot where you are supposed to fill them.  \tGroupAdmin = { [12345] = { [254] = 4, [253] = 3 }; [GROUP_ID] = { [RANK] = ADMIN_POWER }; }   To add on more groups or ranks, just add on this line under.  [12345] = { [254] = 4, [253] = 3 };   ","version":"Next","tagName":"h3"},{"title":"Adding VIP Perks to your Game​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#adding-vip-perks-to-your-game","content":" This part should also be self explantory, the required information is stated under.  \tVIPAdmin = { [-12345] = 3; -- negative item_id (-12345) indicates a GamePass [12345] = 3; -- positive is every other catalog asset (shirts, pants, hats, etc) [54321] = 4; [ITEM_ID] = ADMIN_POWER; }   To add on more assets for VIP, just add a line under.  [54321] = 4;   ","version":"Next","tagName":"h3"},{"title":"Command Limits​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#command-limits","content":" This should be self explantory too, the required information is stated above.  -- Command Limits -- COMMAND_LIMIT - How many commands can be used at once to prevent abuse. -- COOLDOWN_SECONDS - How long to wait between commands to prevent abuse. -- [ADMIN_POWER]= { COMMAND_LIMIT, COOLDOWN_SECONDS } CommandLimits = { [0] = { 1, 10 }, -- Player (rank 0) can use 1 command every 10 seconds [1] = { 16, 5 }, -- VIP (rank 1) can use 10 commands every 5 seconds [2] = { 32, 1 }, -- Moderator (rank 2) can use 16 commands every 1 second [3] = { 64, 1 }, -- Administrator (rank 3) can use 32 commands every 1 second [4] = { 128, 1 }, -- SuperAdmin (rank 4) can use 64 commands every 1 second [5] = { math.huge, 0 }, -- Owner (rank 5) can use infinite commands every 0 seconds [6] = { math.huge, 0 }, -- Game Creator (rank 6) can use infinite commands every 0 seconds [7] = { math.huge, 0 }, -- True Game Creator (rank 7) can use infinite commands every 0 seconds },   ","version":"Next","tagName":"h3"},{"title":"Command Permissions​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#command-permissions","content":" You can refer to the admin permissions table to set up permissions, commands can be found by using the :cmds command in chat, or cmd in the commandbar.  \tPermissions = { -- fly = 0; -- uncomment this line to allow everyone to fly! },   ","version":"Next","tagName":"h3"},{"title":"Configuring the New Loader​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#configuring-the-new-loader","content":" ","version":"Next","tagName":"h2"},{"title":"Settings​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#settings-1","content":" This should be self explantory, as it has the required information. The game hub is a place to advertise that your game is using Kohl's, which can attract players. The VIP features is a way to show appreciation to us and our donors for supporting us, although it is optional, I recommend you to keep it, pretty please.  \t-- Automatic updates from the latest official version of the MainModule -- Disable to use the included MainModule autoUpdate = true, -- Changes the default command prefix prefix = &quot;;&quot;, --[[ Enables participation in the Kohl's Admin Games Hub, showcasing your game to users looking for games with benefits from Kohl's Admin. https://www.roblox.com/games/17873329124/Kohls-Admin-Games-Hub ⚠️ Requires Allowing HTTP Requests in File &gt; Game Settings &gt; Security ]] gameHubEnabled = true, -- Enables Kohl's Admin VIP donation features (required for games hub) vip = true,   ","version":"Next","tagName":"h3"},{"title":"Banning Someone from Joining​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#banning-someone-from-joining-1","content":" This should be self explantory, but the duration is in seconds.   [[ [UserId] = {Username, Reason, Duration, fromUserId} Ban duration -1 forever 0 server session &gt;0 UTC time in seconds ]] bans = { [&quot;2&quot;] = { &quot;John Doe&quot;, &quot;He been noob.&quot;, nil, 44391621 }, [&quot;3&quot;] = { &quot;Jane Doe&quot;, &quot;She was noob.&quot;, 1720922623, 44391621 }, [&quot;5&quot;] = { nil, &quot;Deleted account&quot;, -1, 44391621 }, },   To add more bans, just add this line under.   [&quot;5&quot;] = { nil, &quot;Deleted account&quot;, -1, 44391621 },   ","version":"Next","tagName":"h3"},{"title":"Free Admin​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#free-admin","content":" If you plan to give everyone admin, just remove the -- based on the permission level/s you wish to give.  \t-- Gives everyone access to the uncommented roles freeAdmin = { -- &quot;creator&quot;, -- &quot;superadmin&quot;, -- &quot;admin&quot;, -- &quot;mod&quot;, -- &quot;vip&quot;, },   ","version":"Next","tagName":"h3"},{"title":"Gamepass Admin​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#gamepass-admin","content":" If you plan to give a specific gamepass admin, this would help. Just remove the -- based on the permission level/s you wish to give.  \tgamePassRoles = { -- [gamePassId] = { &quot;mod&quot;, &quot;vip&quot; }, },   ","version":"Next","tagName":"h3"},{"title":"Group Admin​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#group-admin","content":" If you plan to give a specific group admin, this would help. Just remove the -- based on the permission level/s you wish to give.  \tgroupRoles = { -- [groupId] = { -- { rank = 200, roles = { &quot;admin&quot;, &quot;vip&quot; }, exactRank = false }, -- }, },   ","version":"Next","tagName":"h3"},{"title":"User Admin​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#user-admin","content":" This should be self explantory, it accepts UserIDs and private server placeid.  \t[[ Accepts a list of UserIds, sourced from a Roblox profile For example; https://www.roblox.com/users/44391621/profile Has a UserId of 44391621 Use &quot;game.PrivateServerOwnerId&quot; for private servers! ]] userRoles = { creator = {}, superadmin = {}, admin = {}, mod = {}, vip = { 1, 156, PRIVATE_SERVER_OWNER }, },   ","version":"Next","tagName":"h3"},{"title":"Visibility of Kohl's Dashboard and Join Notifications​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#visibility-of-kohls-dashboard-and-join-notifications","content":" This should be pretty self explantory, if you put 1 for the dashboard, only VIPs and higher can see the dashboard button.  \t--[[ Toggles visibility of the Kohl's Admin Dashboard Button in the Topbar. 0\tdefaultRole 1\tvip 2\tmod 3\tadmin 4\tsuperadmin 5\tcreator ]] dashboardButtonRank = 0, -- Toggles visibility of the Kohl's Admin Join Notification. joinNotificationRank = 1,   ","version":"Next","tagName":"h3"},{"title":"Admin Roles​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#admin-roles","content":" This should be self explantory, you can add more ranks and set up how the admin roles work.  \troles = { default = { -- role &quot;_rank&quot; determines hierarchy -- 0 is reserved for the default role _rank = 0, name = &quot;Player&quot;, color = &quot;#0ff&quot;, -- when enabled only allows their player to be used with the player argument -- WARN: doesn't affect commands that use userids! onlyTargetSelf = true, permissions = { -- this permission bypasses all restrictions (danger!) admin = false, -- can ban users via banasync, otherwise only per server session if has ban command banasync = false, -- allows the user to manage saved roles of other users with a lesser role saveRoles = false, -- can configure the global admin settings settings = false, -- can view server-side logs serverlogs = false, }, -- allowed command groups groups = { -- &quot;creator&quot;, -- &quot;administration&quot;, -- &quot;moderation&quot;, -- &quot;environment&quot;, -- &quot;general&quot;, -- &quot;fun&quot;, -- &quot;vip&quot;, &quot;utility&quot;, }, -- command overrides commands = { -- allow the help command help = true, -- disable the shutdown command if given to role by a command group shutdown = false, }, }, vip = { _rank = 1, name = &quot;VIP&quot;, groups = { &quot;vip&quot; }, permissions = {}, color = &quot;#0f8&quot;, onlyTargetSelf = true, }, mod = { _rank = 2, name = &quot;Moderator&quot;, groups = { &quot;moderation&quot;, &quot;general&quot;, &quot;environment&quot;, &quot;fun&quot;, &quot;vip&quot; }, permissions = { serverlogs = true }, color = &quot;#0f0&quot;, }, admin = { _rank = 3, name = &quot;Administrator&quot;, groups = { &quot;administration&quot;, &quot;moderation&quot;, &quot;general&quot;, &quot;environment&quot;, &quot;fun&quot;, &quot;vip&quot; }, permissions = { banasync = true, serverlogs = true }, color = &quot;#ff0&quot;, }, superadmin = { _rank = 4, name = &quot;SuperAdmin&quot;, groups = { &quot;superadmin&quot;, &quot;administration&quot;, &quot;moderation&quot;, &quot;general&quot;, &quot;environment&quot;, &quot;fun&quot;, &quot;vip&quot; }, permissions = { banasync = true, saveRoles = true, settings = true, serverlogs = true }, color = &quot;#f80&quot;, }, creator = { _rank = math.huge, name = &quot;Game Creator&quot;, permissions = { admin = true }, color = &quot;#f00&quot;, }, }   ","version":"Next","tagName":"h3"},{"title":"Verify Installation​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#verify-installation","content":" Open and play the experience that you've imported the model into.Test some basic commands to make sure the admin commands are functioning as expected.    tip Still need help? Feel free to join the Kohl's Admin Discord! ","version":"Next","tagName":"h2"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":"","version":"Next"},{"title":"What Is Kohl's Admin?​","type":1,"pageTitle":"Introduction","url":"/docs/intro#what-is-kohls-admin","content":" Welcome to the Kohl's Admin documentation.  Kohl's Admin (KA) is a versatile administrative tool designed for Roblox game developers. It provides a suite of commands and features that help you manage your game more efficiently. Whether you're moderating player behavior, testing game mechanics, or configuring server settings, Kohl's Admin offers a robust set of tools to enhance your development workflow.  ","version":"Next","tagName":"h2"},{"title":"Key Features​","type":1,"pageTitle":"Introduction","url":"/docs/intro#key-features","content":" Command Management: Execute a wide range of commands directly within your game.Player Moderation: Manage player behavior with tools to kick, ban, or mute players.Customizable Settings: Tailor the admin experience to fit the specific needs of your game.Real-Time Control: Adjust game settings and manage players on the fly.  ","version":"Next","tagName":"h2"},{"title":"Documentation Overview​","type":1,"pageTitle":"Introduction","url":"/docs/intro#documentation-overview","content":" This documentation is structured to help you:  Set Up: Learn how to install and configure Kohl's Admin.Use Features: Explore the various commands and features available in KA.Troubleshoot: Find solutions to common issues and get support.  We recommend starting with the Getting Started guide if you are new to Kohl's Admin. For more advanced topics, you can explore the other sections of this documentation.    We hope this documentation helps you get the most out of Kohl's Admin. If you have any questions or need further assistance, don't hesitate to reach out to the community or consult the Support section. ","version":"Next","tagName":"h2"},{"title":"Promise","type":0,"sectionRef":"#","url":"/api/Promise","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Promise","url":"/api/Promise#types","content":" ","version":null,"tagName":"h2"},{"title":"Status​","type":1,"pageTitle":"Promise","url":"/api/Promise#Status","content":"enum &lt;/&gt; interface Status { Started: &quot;Started&quot;-- The Promise is executing, and not settled yet. Resolved: &quot;Resolved&quot;-- The Promise finished successfully. Rejected: &quot;Rejected&quot;-- The Promise was rejected. Cancelled: &quot;Cancelled&quot;-- The Promise was cancelled before it finished. } An enum value used to represent the Promise's status. ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Promise","url":"/api/Promise#properties","content":" ","version":null,"tagName":"h2"},{"title":"Status​","type":1,"pageTitle":"Promise","url":"/api/Promise#Status","content":"This item is read only and cannot be modified. Read Only enums &lt;/&gt; Promise.Status: Status A table containing all members of the Status enum, e.g., Promise.Status.Resolved. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Promise","url":"/api/Promise#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Promise","url":"/api/Promise#new","content":"&lt;/&gt; Promise.new(executor: ( resolve: (...: any) → (), reject: (...: any) → (), onCancel: (abortHandler?: () → ()) → boolean ) → ()) → Promise Construct a new Promise that will be resolved or rejected with the given callbacks. If you resolve with a Promise, it will be chained onto. You can safely yield within the executor function and it will not block the creating thread. local myFunction() return Promise.new(function(resolve, reject, onCancel) task.wait(1) resolve(&quot;Hello world!&quot;) end) end myFunction():andThen(print) You do not need to use pcall within a Promise. Errors that occur during execution will be caught and turned into a rejection automatically. If error() is called with a table, that table will be the rejection value. Otherwise, string errors will be converted into Promise.Error(Promise.Error.Kind.ExecutionError) objects for tracking debug information. You may register an optional cancellation hook by using the onCancel argument: This should be used to abort any ongoing operations leading up to the promise being settled. Call the onCancel function with a function callback as its only argument to set a hook which will in turn be called when/if the promise is cancelled. onCancel returns true if the Promise was already cancelled when you called onCancel. Calling onCancel with no argument will not override a previously set cancellation hook, but it will still return true if the Promise is currently cancelled. You can set the cancellation hook at any time before resolving. When a promise is cancelled, calls to resolve or reject will be ignored, regardless of if you set a cancellation hook or not. CAUTION If the Promise is cancelled, the executor thread is closed with coroutine.close after the cancellation hook is called. You must perform any cleanup code in the cancellation hook: any time your executor yields, it may never resume.  ","version":null,"tagName":"h3"},{"title":"defer​","type":1,"pageTitle":"Promise","url":"/api/Promise#defer","content":"&lt;/&gt; Promise.defer(executor: ( resolve: (...: any) → (), reject: (...: any) → (), onCancel: (abortHandler?: () → ()) → boolean ) → ()) → Promise The same as Promise.new, except execution begins after the next Heartbeat event. This is a spiritual replacement for spawn, but it does not suffer from the same issues as spawn. local function waitForChild(instance, childName, timeout) return Promise.defer(function(resolve, reject) local child = instance:WaitForChild(childName, timeout) ;(child and resolve or reject)(child) end) end   ","version":null,"tagName":"h3"},{"title":"resolve​","type":1,"pageTitle":"Promise","url":"/api/Promise#resolve","content":"&lt;/&gt; Promise.resolve(...: any) → Promise&lt;...any&gt; Creates an immediately resolved Promise with the given value. -- Example using Promise.resolve to deliver cached values: function getSomething(name) if cache[name] then return Promise.resolve(cache[name]) else return Promise.new(function(resolve, reject) local thing = getTheThing() cache[name] = thing resolve(thing) end) end end   ","version":null,"tagName":"h3"},{"title":"reject​","type":1,"pageTitle":"Promise","url":"/api/Promise#reject","content":"&lt;/&gt; Promise.reject(...: any) → Promise&lt;...any&gt; Creates an immediately rejected Promise with the given value. CAUTION Something needs to consume this rejection (i.e. :catch() it), otherwise it will emit an unhandled Promise rejection warning on the next frame. Thus, you should not create and store rejected Promises for later use. Only create them on-demand as needed.  ","version":null,"tagName":"h3"},{"title":"try​","type":1,"pageTitle":"Promise","url":"/api/Promise#try","content":"&lt;/&gt; Promise.try( callback: (...: T...) → ...any, ...: T...-- Additional arguments passed to callback ) → Promise Begins a Promise chain, calling a function and returning a Promise resolving with its return value. If the function errors, the returned Promise will be rejected with the error. You can safely yield within the Promise.try callback. INFO Promise.try is similar to Promise.promisify, except the callback is invoked immediately instead of returning a new function. Promise.try(function() return math.random(1, 2) == 1 and &quot;ok&quot; or error(&quot;Oh an error!&quot;) end) :andThen(function(text) print(text) end) :catch(function(err) warn(&quot;Something went wrong&quot;) end)   ","version":null,"tagName":"h3"},{"title":"all​","type":1,"pageTitle":"Promise","url":"/api/Promise#all","content":"&lt;/&gt; Promise.all(promises: {Promise&lt;T&gt;}) → Promise&lt;{T}&gt; Accepts an array of Promises and returns a new promise that: is resolved after all input promises resolve. is rejected if any input promises reject. INFO Only the first return value from each promise will be present in the resulting array. After any input Promise rejects, all other input Promises that are still pending will be cancelled if they have no other consumers. local promises = { returnsAPromise(&quot;example 1&quot;), returnsAPromise(&quot;example 2&quot;), returnsAPromise(&quot;example 3&quot;), } return Promise.all(promises)   ","version":null,"tagName":"h3"},{"title":"fold​","type":1,"pageTitle":"Promise","url":"/api/Promise#fold","content":"since v3.1.0 &lt;/&gt; Promise.fold( list: {T | Promise&lt;T&gt;}, reducer: ( accumulator: U, value: T, index: number ) → U | Promise&lt;U&gt;, initialValue: U ) → () Folds an array of values or promises into a single value. The array is traversed sequentially. The reducer function can return a promise or value directly. Each iteration receives the resolved value from the previous, and the first receives your defined initial value. The folding will stop at the first rejection encountered. local basket = {&quot;blueberry&quot;, &quot;melon&quot;, &quot;pear&quot;, &quot;melon&quot;} Promise.fold(basket, function(cost, fruit) if fruit == &quot;blueberry&quot; then return cost -- blueberries are free! else -- call a function that returns a promise with the fruit price return fetchPrice(fruit):andThen(function(fruitCost) return cost + fruitCost end) end end, 0)   ","version":null,"tagName":"h3"},{"title":"some​","type":1,"pageTitle":"Promise","url":"/api/Promise#some","content":"&lt;/&gt; Promise.some( promises: {Promise&lt;T&gt;}, count: number ) → Promise&lt;{T}&gt; Accepts an array of Promises and returns a Promise that is resolved as soon as count Promises are resolved from the input array. The resolved array values are in the order that the Promises resolved in. When this Promise resolves, all other pending Promises are cancelled if they have no other consumers. count 0 results in an empty array. The resultant array will never have more than count elements. local promises = { returnsAPromise(&quot;example 1&quot;), returnsAPromise(&quot;example 2&quot;), returnsAPromise(&quot;example 3&quot;), } return Promise.some(promises, 2) -- Only resolves with first 2 promises to resolve   ","version":null,"tagName":"h3"},{"title":"any​","type":1,"pageTitle":"Promise","url":"/api/Promise#any","content":"&lt;/&gt; Promise.any(promises: {Promise&lt;T&gt;}) → Promise&lt;T&gt; Accepts an array of Promises and returns a Promise that is resolved as soon as any of the input Promises resolves. It will reject only if all input Promises reject. As soon as one Promises resolves, all other pending Promises are cancelled if they have no other consumers. Resolves directly with the value of the first resolved Promise. This is essentially [[Promise.some]] with 1 count, except the Promise resolves with the value directly instead of an array with one element. local promises = { returnsAPromise(&quot;example 1&quot;), returnsAPromise(&quot;example 2&quot;), returnsAPromise(&quot;example 3&quot;), } return Promise.any(promises) -- Resolves with first value to resolve (only rejects if all 3 rejected)   ","version":null,"tagName":"h3"},{"title":"allSettled​","type":1,"pageTitle":"Promise","url":"/api/Promise#allSettled","content":"&lt;/&gt; Promise.allSettled(promises: {Promise&lt;T&gt;}) → Promise&lt;{Status}&gt; Accepts an array of Promises and returns a new Promise that resolves with an array of in-place Statuses when all input Promises have settled. This is equivalent to mapping promise:finally over the array of Promises. local promises = { returnsAPromise(&quot;example 1&quot;), returnsAPromise(&quot;example 2&quot;), returnsAPromise(&quot;example 3&quot;), } return Promise.allSettled(promises)   ","version":null,"tagName":"h3"},{"title":"race​","type":1,"pageTitle":"Promise","url":"/api/Promise#race","content":"&lt;/&gt; Promise.race(promises: {Promise&lt;T&gt;}) → Promise&lt;T&gt; Accepts an array of Promises and returns a new promise that is resolved or rejected as soon as any Promise in the array resolves or rejects. WARNING If the first Promise to settle from the array settles with a rejection, the resulting Promise from race will reject. If you instead want to tolerate rejections, and only care about at least one Promise resolving, you should use Promise.any or Promise.some instead. All other Promises that don't win the race will be cancelled if they have no other consumers. local promises = { returnsAPromise(&quot;example 1&quot;), returnsAPromise(&quot;example 2&quot;), returnsAPromise(&quot;example 3&quot;), } return Promise.race(promises) -- Only returns 1st value to resolve or reject   ","version":null,"tagName":"h3"},{"title":"each​","type":1,"pageTitle":"Promise","url":"/api/Promise#each","content":"since 3.0.0 &lt;/&gt; Promise.each( list: {T | Promise&lt;T&gt;}, predicate: ( value: T, index: number ) → U | Promise&lt;U&gt; ) → Promise&lt;{U}&gt; Iterates serially over the given an array of values, calling the predicate callback on each value before continuing. If the predicate returns a Promise, we wait for that Promise to resolve before moving on to the next item in the array. INFO Promise.each is similar to Promise.all, except the Promises are ran in order instead of all at once. But because Promises are eager, by the time they are created, they're already running. Thus, we need a way to defer creation of each Promise until a later time. The predicate function exists as a way for us to operate on our data instead of creating a new closure for each Promise. If you would prefer, you can pass in an array of functions, and in the predicate, call the function and return its return value. Promise.each({ &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;qux&quot; }, function(value, index) return Promise.delay(1):andThen(function() print((&quot;%d) Got %s!&quot;):format(index, value)) end) end) --[[ (1 second passes) &gt; 1) Got foo! (1 second passes) &gt; 2) Got bar! (1 second passes) &gt; 3) Got baz! (1 second passes) &gt; 4) Got qux! ]] If the Promise a predicate returns rejects, the Promise from Promise.each is also rejected with the same value. If the array of values contains a Promise, when we get to that point in the list, we wait for the Promise to resolve before calling the predicate with the value. If a Promise in the array of values is already Rejected when Promise.each is called, Promise.each rejects with that value immediately (the predicate callback will never be called even once). If a Promise in the list is already Cancelled when Promise.each is called, Promise.each rejects with Promise.Error(Promise.Error.Kind.AlreadyCancelled). If a Promise in the array of values is Started at first, but later rejects, Promise.each will reject with that value and iteration will not continue once iteration encounters that value. Returns a Promise containing an array of the returned/resolved values from the predicate for each item in the array of values. If this Promise returned from Promise.each rejects or is cancelled for any reason, the following are true: Iteration will not continue. Any Promises within the array of values will now be cancelled if they have no other consumers. The Promise returned from the currently active predicate will be cancelled if it hasn't resolved yet.  ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"Promise","url":"/api/Promise#is","content":"&lt;/&gt; Promise.is(object: any) → boolean-- true if the given object is a Promise. Checks whether the given object is a Promise via duck typing. This only checks if the object is a table and has an andThen method.  ","version":null,"tagName":"h3"},{"title":"promisify​","type":1,"pageTitle":"Promise","url":"/api/Promise#promisify","content":"&lt;/&gt; Promise.promisify(callback: (...: any) → ...any) → (...: any) → Promise Wraps a function that yields into one that returns a Promise. Any errors that occur while executing the function will be turned into rejections. INFO Promise.promisify is similar to Promise.try, except the callback is returned as a callable function instead of being invoked immediately. local sleep = Promise.promisify(wait) sleep(1):andThen(print) local isPlayerInGroup = Promise.promisify(function(player, groupId) return player:IsInGroup(groupId) end)   ","version":null,"tagName":"h3"},{"title":"delay​","type":1,"pageTitle":"Promise","url":"/api/Promise#delay","content":"&lt;/&gt; Promise.delay(seconds: number) → Promise&lt;number&gt; Returns a Promise that resolves after seconds seconds have passed. The Promise resolves with the actual amount of time that was waited. This function is not a wrapper around wait. Promise.delay uses a custom scheduler which provides more accurate timing. As an optimization, cancelling this Promise instantly removes the task from the scheduler. WARNING Passing NaN, infinity, or a number less than 1/60 is equivalent to passing 1/60. Promise.delay(5):andThenCall(print, &quot;This prints after 5 seconds&quot;)   ","version":null,"tagName":"h3"},{"title":"retry​","type":1,"pageTitle":"Promise","url":"/api/Promise#retry","content":"since 3.0.0 &lt;/&gt; Promise.retry( callback: (...: P) → Promise&lt;T&gt;, times: number, ...?: P ) → Promise&lt;T&gt; Repeatedly calls a Promise-returning function up to times number of times, until the returned Promise resolves. If the amount of retries is exceeded, the function will return the latest rejected Promise. local function canFail(a, b, c) return Promise.new(function(resolve, reject) -- do something that can fail local failed, thing = doSomethingThatCanFail(a, b, c) if failed then reject(&quot;it failed&quot;) else resolve(thing) end end) end local MAX_RETRIES = 10 local value = Promise.retry(canFail, MAX_RETRIES, &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;) -- args to send to canFail   ","version":null,"tagName":"h3"},{"title":"retryWithDelay​","type":1,"pageTitle":"Promise","url":"/api/Promise#retryWithDelay","content":"since v3.2.0 &lt;/&gt; Promise.retryWithDelay( callback: (...: P) → Promise&lt;T&gt;, times: number, seconds: number, ...?: P ) → Promise&lt;T&gt; Repeatedly calls a Promise-returning function up to times number of times, waiting seconds seconds between each retry, until the returned Promise resolves. If the amount of retries is exceeded, the function will return the latest rejected Promise.  ","version":null,"tagName":"h3"},{"title":"fromEvent​","type":1,"pageTitle":"Promise","url":"/api/Promise#fromEvent","content":"since 3.0.0 &lt;/&gt; Promise.fromEvent( event: Event,-- Any object with a Connect method. This includes all Roblox events. predicate?: (...: P) → boolean-- A function which determines if the Promise should resolve with the given value, or wait for the next event to check again. ) → Promise&lt;P&gt; Converts an event into a Promise which resolves the next time the event fires. The optional predicate callback, if passed, will receive the event arguments and should return true or false, based on if this fired event should resolve the Promise or not. If true, the Promise resolves. If false, nothing happens and the predicate will be rerun the next time the event fires. The Promise will resolve with the event arguments. TIP This function will work given any object with a Connect method. This includes all Roblox events. -- Creates a Promise which only resolves when `somePart` is touched -- by a part named `&quot;Something specific&quot;`. return Promise.fromEvent(somePart.Touched, function(part) return part.Name == &quot;Something specific&quot; end)   ","version":null,"tagName":"h3"},{"title":"onUnhandledRejection​","type":1,"pageTitle":"Promise","url":"/api/Promise#onUnhandledRejection","content":"since v3.2.0 &lt;/&gt; Promise.onUnhandledRejection( callback: ( promise: Promise, ...: any )-- A callback that runs when an unhandled rejection happens. ) → () → ()-- Function that unregisters the callback when called Registers a callback that runs when an unhandled rejection happens. An unhandled rejection happens when a Promise is rejected, and the rejection is not observed with :catch. The callback is called with the actual promise that rejected, followed by the rejection values.  ","version":null,"tagName":"h3"},{"title":"timeout​","type":1,"pageTitle":"Promise","url":"/api/Promise#timeout","content":"&lt;/&gt; Promise:timeout( seconds: number, rejectionValue?: any-- The value to reject with if the timeout is reached ) → Promise Returns a new Promise that resolves if the chained Promise resolves within seconds seconds, or rejects if execution time exceeds seconds. The chained Promise will be cancelled if the timeout is reached. Rejects with rejectionValue if it is non-nil. If a rejectionValue is not given, it will reject with a Promise.Error(Promise.Error.Kind.TimedOut). This can be checked with [[Error.isKind]]. getSomething():timeout(5):andThen(function(something) -- got something and it only took at max 5 seconds end):catch(function(e) -- Either getting something failed or the time was exceeded. if Promise.Error.isKind(e, Promise.Error.Kind.TimedOut) then warn(&quot;Operation timed out!&quot;) else warn(&quot;Operation encountered an error!&quot;) end end) Sugar for: Promise.race({ Promise.delay(seconds):andThen(function() return Promise.reject( rejectionValue == nil and Promise.Error.new({ kind = Promise.Error.Kind.TimedOut }) or rejectionValue ) end), promise })   ","version":null,"tagName":"h3"},{"title":"getStatus​","type":1,"pageTitle":"Promise","url":"/api/Promise#getStatus","content":"&lt;/&gt; Promise:getStatus() → Status Returns the current Promise status.  ","version":null,"tagName":"h3"},{"title":"andThen​","type":1,"pageTitle":"Promise","url":"/api/Promise#andThen","content":"&lt;/&gt; Promise:andThen( successHandler: (...: any) → ...any, failureHandler?: (...: any) → ...any ) → Promise&lt;...any&gt; Chains onto an existing Promise and returns a new Promise. WARNING Within the failure handler, you should never assume that the rejection value is a string. Some rejections within the Promise library are represented by [[Error]] objects. If you want to treat it as a string for debugging, you should call tostring on it first. You can return a Promise from the success or failure handler and it will be chained onto. Calling andThen on a cancelled Promise returns a cancelled Promise. TIP If the Promise returned by andThen is cancelled, successHandler and failureHandler will not run. To run code no matter what, use Promise:finally.  ","version":null,"tagName":"h3"},{"title":"catch​","type":1,"pageTitle":"Promise","url":"/api/Promise#catch","content":"&lt;/&gt; Promise:catch(failureHandler: (...: any) → ...any) → Promise&lt;...any&gt; Shorthand for Promise:andThen(nil, failureHandler). Returns a Promise that resolves if the failureHandler worked without encountering an additional error. WARNING Within the failure handler, you should never assume that the rejection value is a string. Some rejections within the Promise library are represented by [[Error]] objects. If you want to treat it as a string for debugging, you should call tostring on it first. Calling catch on a cancelled Promise returns a cancelled Promise. TIP If the Promise returned by catch is cancelled, failureHandler will not run. To run code no matter what, use Promise:finally.  ","version":null,"tagName":"h3"},{"title":"tap​","type":1,"pageTitle":"Promise","url":"/api/Promise#tap","content":"&lt;/&gt; Promise:tap(tapHandler: (...: any) → ...any) → Promise&lt;...any&gt; Similar to Promise.andThen, except the return value is the same as the value passed to the handler. In other words, you can insert a :tap into a Promise chain without affecting the value that downstream Promises receive. getTheValue() :tap(print) :andThen(function(theValue) print(&quot;Got&quot;, theValue, &quot;even though print returns nil!&quot;) end) If you return a Promise from the tap handler callback, its value will be discarded but tap will still wait until it resolves before passing the original value through.  ","version":null,"tagName":"h3"},{"title":"andThenCall​","type":1,"pageTitle":"Promise","url":"/api/Promise#andThenCall","content":"&lt;/&gt; Promise:andThenCall( callback: (...: any) → any, ...?: any-- Additional arguments which will be passed to callback ) → Promise Attaches an andThen handler to this Promise that calls the given callback with the predefined arguments. The resolved value is discarded. promise:andThenCall(someFunction, &quot;some&quot;, &quot;arguments&quot;) This is sugar for promise:andThen(function() return someFunction(&quot;some&quot;, &quot;arguments&quot;) end)   ","version":null,"tagName":"h3"},{"title":"andThenReturn​","type":1,"pageTitle":"Promise","url":"/api/Promise#andThenReturn","content":"&lt;/&gt; Promise:andThenReturn( ...: any-- Values to return from the function ) → Promise Attaches an andThen handler to this Promise that discards the resolved value and returns the given value from it. promise:andThenReturn(&quot;some&quot;, &quot;values&quot;) This is sugar for promise:andThen(function() return &quot;some&quot;, &quot;values&quot; end) CAUTION Promises are eager, so if you pass a Promise to andThenReturn, it will begin executing before andThenReturn is reached in the chain. Likewise, if you pass a Promise created from [[Promise.reject]] into andThenReturn, it's possible that this will trigger the unhandled rejection warning. If you need to return a Promise, it's usually best practice to use [[Promise.andThen]].  ","version":null,"tagName":"h3"},{"title":"cancel​","type":1,"pageTitle":"Promise","url":"/api/Promise#cancel","content":"&lt;/&gt; Promise:cancel() → () Cancels this promise, preventing the promise from resolving or rejecting. Does not do anything if the promise is already settled. Cancellations will propagate upwards and downwards through chained promises. Promises will only be cancelled if all of their consumers are also cancelled. This is to say that if you call andThen twice on the same promise, and you cancel only one of the child promises, it will not cancel the parent promise until the other child promise is also cancelled. promise:cancel()   ","version":null,"tagName":"h3"},{"title":"finally​","type":1,"pageTitle":"Promise","url":"/api/Promise#finally","content":"&lt;/&gt; Promise:finally(finallyHandler: (status: Status) → ...any) → Promise&lt;...any&gt; Set a handler that will be called regardless of the promise's fate. The handler is called when the promise is resolved, rejected, or cancelled. Returns a new Promise that: resolves with the same values that this Promise resolves with. rejects with the same values that this Promise rejects with. is cancelled if this Promise is cancelled. If the value you return from the handler is a Promise: We wait for the Promise to resolve, but we ultimately discard the resolved value. If the returned Promise rejects, the Promise returned from finally will reject with the rejected value from the returned promise. If the finally Promise is cancelled, and you returned a Promise from the handler, we cancel that Promise too. Otherwise, the return value from the finally handler is entirely discarded. Cancellation As of Promise v4, Promise:finally does not count as a consumer of the parent Promise for cancellation purposes. This means that if all of a Promise's consumers are cancelled and the only remaining callbacks are finally handlers, the Promise is cancelled and the finally callbacks run then and there. Cancellation still propagates through the finally Promise though: if you cancel the finally Promise, it can cancel its parent Promise if it had no other consumers. Likewise, if the parent Promise is cancelled, the finally Promise will also be cancelled. local thing = createSomething() doSomethingWith(thing) :andThen(function() print(&quot;It worked!&quot;) -- do something.. end) :catch(function() warn(&quot;Oh no it failed!&quot;) end) :finally(function() -- either way, destroy thing thing:Destroy() end)   ","version":null,"tagName":"h3"},{"title":"finallyCall​","type":1,"pageTitle":"Promise","url":"/api/Promise#finallyCall","content":"&lt;/&gt; Promise:finallyCall( callback: (...: any) → any, ...?: any-- Additional arguments which will be passed to callback ) → Promise Same as andThenCall, except for finally. Attaches a finally handler to this Promise that calls the given callback with the predefined arguments.  ","version":null,"tagName":"h3"},{"title":"finallyReturn​","type":1,"pageTitle":"Promise","url":"/api/Promise#finallyReturn","content":"&lt;/&gt; Promise:finallyReturn( ...: any-- Values to return from the function ) → Promise Attaches a finally handler to this Promise that discards the resolved value and returns the given value from it. promise:finallyReturn(&quot;some&quot;, &quot;values&quot;) This is sugar for promise:finally(function() return &quot;some&quot;, &quot;values&quot; end)   ","version":null,"tagName":"h3"},{"title":"awaitStatus​","type":1,"pageTitle":"Promise","url":"/api/Promise#awaitStatus","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Promise:awaitStatus() → ( Status,-- The Status representing the fate of the Promise ...any-- The values the Promise resolved or rejected with. ) Yields the current thread until the given Promise completes. Returns the Promise's status, followed by the values that the promise resolved or rejected with.  ","version":null,"tagName":"h3"},{"title":"await​","type":1,"pageTitle":"Promise","url":"/api/Promise#await","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Promise:await() → ( boolean,-- true if the Promise successfully resolved ...any-- The values the Promise resolved or rejected with. ) Yields the current thread until the given Promise completes. Returns true if the Promise resolved, followed by the values that the promise resolved or rejected with. CAUTION If the Promise gets cancelled, this function will return false, which is indistinguishable from a rejection. If you need to differentiate, you should use [[Promise.awaitStatus]] instead. local worked, value = getTheValue():await() if worked then print(&quot;got&quot;, value) else warn(&quot;it failed&quot;) end   ","version":null,"tagName":"h3"},{"title":"expect​","type":1,"pageTitle":"Promise","url":"/api/Promise#expect","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Promise:expect() → ...any-- The values the Promise resolved with. Yields the current thread until the given Promise completes. Returns the values that the promise resolved with. local worked = pcall(function() print(&quot;got&quot;, getTheValue():expect()) end) if not worked then warn(&quot;it failed&quot;) end This is essentially sugar for: select(2, assert(promise:await())) Errors if the Promise rejects or gets cancelled. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"Promise","url":"/api/Promise##","content":"Type\tDescriptionany\tErrors with the rejection value if this Promise rejects or gets cancelled.  ","version":null,"tagName":"h3"},{"title":"now​","type":1,"pageTitle":"Promise","url":"/api/Promise#now","content":"&lt;/&gt; Promise:now( rejectionValue?: any-- The value to reject with if the Promise isn't resolved ) → Promise Chains a Promise from this one that is resolved if this Promise is already resolved, and rejected if it is not resolved at the time of calling :now(). This can be used to ensure your andThen handler occurs on the same frame as the root Promise execution. doSomething() :now() :andThen(function(value) print(&quot;Got&quot;, value, &quot;synchronously.&quot;) end) If this Promise is still running, Rejected, or Cancelled, the Promise returned from :now() will reject with the rejectionValue if passed, otherwise with a Promise.Error(Promise.Error.Kind.NotResolvedInTime). This can be checked with [[Error.isKind]]. ","version":null,"tagName":"h3"},{"title":"Support","type":0,"sectionRef":"#","url":"/docs/support","content":"","keywords":"","version":"Next"},{"title":"Community Support​","type":1,"pageTitle":"Support","url":"/docs/support#community-support","content":" The best place to get help with Kohl's Admin is through our community-driven Discord server. Here, you can connect with other developers, ask questions, share your experiences, and get real-time support from experienced users.  Join the Kohl's Admin Discord server: discord.gg/kohl  In the Discord server, you will find:  Help Channels: Dedicated channels where you can ask questions and get answers from the community.Announcements: Stay updated with the latest news and updates about Kohl's Admin.Feature Requests: Suggest new features or improvements and vote on suggestions from others.Bug Reports: Report any issues you encounter and get assistance with troubleshooting.  ","version":"Next","tagName":"h2"},{"title":"Documentation​","type":1,"pageTitle":"Support","url":"/docs/support#documentation","content":" Before reaching out for help, make sure to review the documentation. Many common questions and issues are addressed in the following sections:  Getting Started: A step-by-step guide to installing and configuring Kohl's Admin.  ","version":"Next","tagName":"h2"},{"title":"Contact Us​","type":1,"pageTitle":"Support","url":"/docs/support#contact-us","content":" If you're unable to find the help you need through the documentation or Discord, you can contact the Kohl's Admin team directly through the Discord server for further assistance.    We encourage you to be an active member of the community, whether by helping others or sharing your experiences. The more we contribute, the better Kohl's Admin can become for everyone. ","version":"Next","tagName":"h2"},{"title":"Troubleshoot","type":0,"sectionRef":"#","url":"/docs/troubleshooting","content":"Troubleshoot note Kohl's Admin is currently in development. Everything in these docs is subject to change.","keywords":"","version":"Next"}],"options":{"id":"default"}}
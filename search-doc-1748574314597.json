{"searchDocs":[{"title":"Checkbox","type":0,"sectionRef":"#","url":"/api/Checkbox","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#types","content":" ","version":null,"tagName":"h2"},{"title":"CheckboxDefinition​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#CheckboxDefinition","content":"&lt;/&gt; type CheckboxDefinition = { Value: Types.Stateful&lt;boolean&gt;, _instance: TextButton } A generic function type ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Checkbox","url":"/api/Checkbox#new","content":"&lt;/&gt; Checkbox.new(definition: CheckboxDefinition) → () Creates a new checkbox. ","version":null,"tagName":"h3"},{"title":"CircleProgress","type":0,"sectionRef":"#","url":"/api/CircleProgress","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"CircleProgress","url":"/api/CircleProgress#types","content":" ","version":null,"tagName":"h2"},{"title":"CircleProgressDefinition​","type":1,"pageTitle":"CircleProgress","url":"/api/CircleProgress#CircleProgressDefinition","content":"&lt;/&gt; type CircleProgressDefinition = { Value: Types.Stateful&lt;boolean&gt;, Padding: UDim , Size: UDim2 , _instance: TextButton } A circular progress indicator type ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"CircleProgress","url":"/api/CircleProgress#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"CircleProgress","url":"/api/CircleProgress#new","content":"&lt;/&gt; CircleProgress.new(definition: CircleProgressDefinition) → () Creates a new circular progress indicator. ","version":null,"tagName":"h3"},{"title":"Hook","type":0,"sectionRef":"#","url":"/api/Hook","content":"Hook","keywords":"","version":null},{"title":"Auth","type":0,"sectionRef":"#","url":"/api/Auth","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Auth","url":"/api/Auth#functions","content":" ","version":null,"tagName":"h2"},{"title":"roleIdSort​","type":1,"pageTitle":"Auth","url":"/api/Auth#roleIdSort","content":"&lt;/&gt; Auth.roleIdSort( a: Role, b: Role ) → boolean Sorts roleIds by highest to lowest  ","version":null,"tagName":"h3"},{"title":"roleIdSortAscending​","type":1,"pageTitle":"Auth","url":"/api/Auth#roleIdSortAscending","content":"&lt;/&gt; Auth.roleIdSortAscending( a: Role, b: Role ) → boolean Sorts roleIds by lowest to highest  ","version":null,"tagName":"h3"},{"title":"userRoleAdd​","type":1,"pageTitle":"Auth","url":"/api/Auth#userRoleAdd","content":"&lt;/&gt; Auth.userRoleAdd( userId: number, roleId: Role, persist: boolean? ) → boolean Adds a role to a user if they don't already have it  ","version":null,"tagName":"h3"},{"title":"userRoleRemove​","type":1,"pageTitle":"Auth","url":"/api/Auth#userRoleRemove","content":"&lt;/&gt; Auth.userRoleRemove( userId: number, roleId: Role ) → boolean Removes a role from a user if it exists  ","version":null,"tagName":"h3"},{"title":"roleCanUseArgument​","type":1,"pageTitle":"Auth","url":"/api/Auth#roleCanUseArgument","content":"&lt;/&gt; Auth.roleCanUseArgument( roleId: Role, argument: any ) → boolean Checks if a role has access to a command argument  ","version":null,"tagName":"h3"},{"title":"roleCanUseCommand​","type":1,"pageTitle":"Auth","url":"/api/Auth#roleCanUseCommand","content":"&lt;/&gt; Auth.roleCanUseCommand( roleId: Role, command: any ) → boolean Checks if a role has access to a command  ","version":null,"tagName":"h3"},{"title":"hasArgument​","type":1,"pageTitle":"Auth","url":"/api/Auth#hasArgument","content":"&lt;/&gt; Auth.hasArgument( userId: number, argument: any ) → boolean Checks if a user has access to a command argument  ","version":null,"tagName":"h3"},{"title":"hasCommand​","type":1,"pageTitle":"Auth","url":"/api/Auth#hasCommand","content":"&lt;/&gt; Auth.hasCommand( userId: number, command: any ) → boolean | number Checks if a user has access to a command, returns their rank if they do  ","version":null,"tagName":"h3"},{"title":"hasPermission​","type":1,"pageTitle":"Auth","url":"/api/Auth#hasPermission","content":"&lt;/&gt; Auth.hasPermission( userId: number, permission: string ) → boolean Checks if a user has access to a permission  ","version":null,"tagName":"h3"},{"title":"getRank​","type":1,"pageTitle":"Auth","url":"/api/Auth#getRank","content":"&lt;/&gt; Auth.getRank(userId: number) → ( number, Role ) Checks the maximum role rank of the user ","version":null,"tagName":"h3"},{"title":"MainModule","type":0,"sectionRef":"#","url":"/api/MainModule","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"MainModule","url":"/api/MainModule#types","content":" ","version":null,"tagName":"h2"},{"title":"_K​","type":1,"pageTitle":"MainModule","url":"/api/MainModule#_K","content":"&lt;/&gt; interface _K { Flux: Flux Auth: Auth Process: Process Registry: Registry Util: Util UI: UI IsClient: boolean IsServer: boolean IsStudio: boolean client: {[any]: any}? pinnedAnnouncement: {}? _serverLock: boolean creatorId: number log: Logger.log logger: Logger.logger }  ","version":null,"tagName":"h3"},{"title":"Process","type":0,"sectionRef":"#","url":"/api/Process","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Process","url":"/api/Process#functions","content":" ","version":null,"tagName":"h2"},{"title":"rawParse​","type":1,"pageTitle":"Process","url":"/api/Process#rawParse","content":"&lt;/&gt; Process.rawParse( message: string, prefixes: {string}, delimiter: string ) → {any}? Parses a string into a raw command format. ","version":null,"tagName":"h3"},{"title":"Logger","type":0,"sectionRef":"#","url":"/api/Logger","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Logger","url":"/api/Logger#types","content":" ","version":null,"tagName":"h2"},{"title":"LogType​","type":1,"pageTitle":"Logger","url":"/api/Logger#LogType","content":"&lt;/&gt; type LogType = &quot;INFO&quot; | &quot;WARN&quot; | &quot;ERROR&quot; | &quot;DEBUG&quot; | &quot;CHAT&quot; | &quot;COMMAND&quot; | &quot;PURCHASE&quot; | &quot;DAMAGE&quot; | &quot;DEATH&quot; | &quot;KILL&quot; | &quot;JOIN&quot; | &quot;LEAVE&quot; | string   ","version":null,"tagName":"h3"},{"title":"Log​","type":1,"pageTitle":"Logger","url":"/api/Logger#Log","content":"&lt;/&gt; type Log = { text: string, level: LogType, time: number, user: number? }   ","version":null,"tagName":"h3"},{"title":"Logger​","type":1,"pageTitle":"Logger","url":"/api/Logger#Logger","content":"&lt;/&gt; type Logger = typeof(setmetatable({}:: { logs: {Log}, debug: boolean? },Logger))  ","version":null,"tagName":"h3"},{"title":"Remote","type":0,"sectionRef":"#","url":"/api/Remote","content":"Remote","keywords":"","version":null},{"title":"Tasks","type":0,"sectionRef":"#","url":"/api/Tasks","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Tasks","url":"/api/Tasks#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Tasks","url":"/api/Tasks#new","content":"&lt;/&gt; Tasks.new() → Tasks Creates a new Tasks instance.  ","version":null,"tagName":"h3"},{"title":"add​","type":1,"pageTitle":"Tasks","url":"/api/Tasks#add","content":"&lt;/&gt; Tasks.add( self: Tasks, callback: (...any) → ...any, ...: any ) → () Adds a new task to be executed concurrently.  ","version":null,"tagName":"h3"},{"title":"wait​","type":1,"pageTitle":"Tasks","url":"/api/Tasks#wait","content":"&lt;/&gt; Tasks.wait(self: Tasks) → {{any}}? Waits for all tasks to complete, returning the results in a list.  ","version":null,"tagName":"h3"},{"title":"waitForFirst​","type":1,"pageTitle":"Tasks","url":"/api/Tasks#waitForFirst","content":"&lt;/&gt; Tasks.waitForFirst(self: Tasks) → ( boolean, ...any ) Waits for the first task to complete, returning the function's success and its results. ","version":null,"tagName":"h3"},{"title":"Flux","type":0,"sectionRef":"#","url":"/api/Flux","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Flux","url":"/api/Flux#types","content":" ","version":null,"tagName":"h2"},{"title":"Function​","type":1,"pageTitle":"Flux","url":"/api/Flux#Function","content":"&lt;/&gt; type Function = (...any) → ...any A generic function type  ","version":null,"tagName":"h3"},{"title":"List​","type":1,"pageTitle":"Flux","url":"/api/Flux#List","content":"&lt;/&gt; type List = {T} A generic list type  ","version":null,"tagName":"h3"},{"title":"Set​","type":1,"pageTitle":"Flux","url":"/api/Flux#Set","content":"&lt;/&gt; type Set = {[T]: boolean} A generic set type implemented as a table with boolean values  ","version":null,"tagName":"h3"},{"title":"Dict​","type":1,"pageTitle":"Flux","url":"/api/Flux#Dict","content":"&lt;/&gt; type Dict = {[T]: any} Represents a dictionary-like table with keys of type T and values of any type.  ","version":null,"tagName":"h3"},{"title":"State​","type":1,"pageTitle":"Flux","url":"/api/Flux#State","content":"&lt;/&gt; type State = { _update: (State&lt;T&gt;) → boolean, _dependencies: Set&lt;State&lt;T&gt;&gt;, _dependents: Set&lt;State&lt;T&gt;&gt;, _binds: { [T]: any, _cleanup: List&lt;any&gt; }, _hooks: Dict&lt;Function&gt;, _value: T, _stateful: boolean, _operation: List&lt;any&gt;?, _tweenInfo: TweenInfo | any, set: ( self: State&lt;T&gt;, new: T, force: boolean?, noTween: boolean? ) → State&lt;T&gt;, get: (self: State&lt;T&gt;) → T, hook: ( self: State&lt;T&gt;, callback: Function ) → Function, Destroy: (self: State&lt;T&gt;) → (), bindToProperty: ( self: State&lt;T&gt;, instance: Instanceproperty: string ) → (), bindToAttribute: ( self: State&lt;T&gt;, instance: Instance , attribute: string ) → () } Represents a reactive state object in the Flux system  ","version":null,"tagName":"h3"},{"title":"Stateful<T>​","type":1,"pageTitle":"Flux","url":"/api/Flux#Stateful<T>","content":"&lt;/&gt; type Stateful&lt;T&gt; = T | State&lt;T&gt; A type for state or raw values  ","version":null,"tagName":"h3"},{"title":"SpecialKey​","type":1,"pageTitle":"Flux","url":"/api/Flux#SpecialKey","content":"&lt;/&gt; type SpecialKey = {type: &quot;SpecialKey&quot;} A type for state or raw values  ","version":null,"tagName":"h3"},{"title":"SpecialDefinition​","type":1,"pageTitle":"Flux","url":"/api/Flux#SpecialDefinition","content":"&lt;/&gt; type SpecialDefinition = {[number | string | SpecialKey]: unknown} Represents the definition used in Flux.new and Flux.edit ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Flux","url":"/api/Flux#properties","content":" ","version":null,"tagName":"h2"},{"title":"Attribute​","type":1,"pageTitle":"Flux","url":"/api/Flux#Attribute","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flux.Attribute: SpecialKey A marker for defining Instance attributes in Flux.edit  ","version":null,"tagName":"h3"},{"title":"Children​","type":1,"pageTitle":"Flux","url":"/api/Flux#Children","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flux.Children: SpecialKey A marker for defining Instance children in Flux.edit  ","version":null,"tagName":"h3"},{"title":"Event​","type":1,"pageTitle":"Flux","url":"/api/Flux#Event","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flux.Event: SpecialKey &amp; { Attribute=SpecialKey, Property=SpecialKey } Markers for defining events in Flux.edit ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Flux","url":"/api/Flux#functions","content":" ","version":null,"tagName":"h2"},{"title":"isState​","type":1,"pageTitle":"Flux","url":"/api/Flux#isState","content":"&lt;/&gt; Flux.isState(object: any) → boolean Checks if an object is a Flux state  ","version":null,"tagName":"h3"},{"title":"peek​","type":1,"pageTitle":"Flux","url":"/api/Flux#peek","content":"&lt;/&gt; Flux.peek(object: T) → T Gets the current value of a Flux state or returns the input if it's not a state  ","version":null,"tagName":"h3"},{"title":"peekVariadic​","type":1,"pageTitle":"Flux","url":"/api/Flux#peekVariadic","content":"&lt;/&gt; Flux.peekVariadic(...: any) → ...any Gets the current values of multiple Flux states or non-state inputs  ","version":null,"tagName":"h3"},{"title":"edit​","type":1,"pageTitle":"Flux","url":"/api/Flux#edit","content":"&lt;/&gt; Flux.edit( instance: Instance , definition: SpecialDefinition &amp; Instance ) → Instance  Edits an existing Instance with Flux state bindings and other properties  ","version":null,"tagName":"h3"},{"title":"new​","type":1,"pageTitle":"Flux","url":"/api/Flux#new","content":"&lt;/&gt; Flux.new(className: string) → Flux.edit Creates a new Instance with Flux state bindings and other properties  ","version":null,"tagName":"h3"},{"title":"computeFrom​","type":1,"pageTitle":"Flux","url":"/api/Flux#computeFrom","content":"&lt;/&gt; Flux.computeFrom( computation: (...any) → T, ...: any ) → State&lt;T&gt; Creates a computed state based on other states or static values  ","version":null,"tagName":"h3"},{"title":"compute​","type":1,"pageTitle":"Flux","url":"/api/Flux#compute","content":"&lt;/&gt; Flux.compute(computation: (use: &lt;U&gt;(U | State&lt;U&gt;) → U?) → T) → State&lt;T&gt; Creates a computed state, passing a use function to access and bind other states  ","version":null,"tagName":"h3"},{"title":"tween​","type":1,"pageTitle":"Flux","url":"/api/Flux#tween","content":"&lt;/&gt; Flux.tween( tweenInfo: Stateful&lt;TweenInfo &gt;, state: State&lt;T&gt; ) → State&lt;T&gt; Applies TweenService tweens with Instance properties bound to the Flux state  ","version":null,"tagName":"h3"},{"title":"state​","type":1,"pageTitle":"Flux","url":"/api/Flux#state","content":"&lt;/&gt; Flux.state( initialValue: T | State&lt;T&gt; | Instance , property: string? ) → State&lt;T&gt; Creates a new Flux state with an initial value  ","version":null,"tagName":"h3"},{"title":"_addDependency​","type":1,"pageTitle":"Flux","url":"/api/Flux#_addDependency","content":"&lt;/&gt; Flux:_addDependency(dependency: State&lt;T&gt;) → () Adds a dependency to the current state  ","version":null,"tagName":"h3"},{"title":"_removeDependency​","type":1,"pageTitle":"Flux","url":"/api/Flux#_removeDependency","content":"&lt;/&gt; Flux:_removeDependency(dependency: State&lt;T&gt;) → () Removes a dependency from the current state  ","version":null,"tagName":"h3"},{"title":"_update​","type":1,"pageTitle":"Flux","url":"/api/Flux#_update","content":"&lt;/&gt; Flux:_update(noTween: boolean?) → () Updates the state and propagates changes to dependents  ","version":null,"tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"Flux","url":"/api/Flux#Destroy","content":"&lt;/&gt; Flux:Destroy() → () Destroys the state, clearing all dependencies and bindings  ","version":null,"tagName":"h3"},{"title":"hook​","type":1,"pageTitle":"Flux","url":"/api/Flux#hook","content":"&lt;/&gt; Flux:hook(callback: Function) → Function Adds a hook callback function to be called when the state changes  ","version":null,"tagName":"h3"},{"title":"get​","type":1,"pageTitle":"Flux","url":"/api/Flux#get","content":"&lt;/&gt; Flux:get() → any Gets the current value of the state  ","version":null,"tagName":"h3"},{"title":"set​","type":1,"pageTitle":"Flux","url":"/api/Flux#set","content":"&lt;/&gt; Flux:set( new: T, forceUpdate: boolean?, noTween: boolean? ) → State&lt;T&gt; Sets a new value for the state and triggers an update  ","version":null,"tagName":"h3"},{"title":"bindToProperty​","type":1,"pageTitle":"Flux","url":"/api/Flux#bindToProperty","content":"&lt;/&gt; Flux:bindToProperty( instance: Instance , property: string ) → () Binds the state to a property of an Instance  ","version":null,"tagName":"h3"},{"title":"bindToAttribute​","type":1,"pageTitle":"Flux","url":"/api/Flux#bindToAttribute","content":"&lt;/&gt; Flux:bindToAttribute( instance: Instance , attribute: string ) → () Binds the state to an attribute of an Instance ","version":null,"tagName":"h3"},{"title":"Util","type":0,"sectionRef":"#","url":"/api/Util","content":"Util","keywords":"","version":null},{"title":"Registry","type":0,"sectionRef":"#","url":"/api/Registry","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Registry","url":"/api/Registry#types","content":" ","version":null,"tagName":"h2"},{"title":"ArgumentFunction​","type":1,"pageTitle":"Registry","url":"/api/Registry#ArgumentFunction","content":"&lt;/&gt; type ArgumentFunction = ( value: any, from: Player ) → ...any   ","version":null,"tagName":"h3"},{"title":"ArgumentDefinition​","type":1,"pageTitle":"Registry","url":"/api/Registry#ArgumentDefinition","content":"&lt;/&gt; type ArgumentDefinition = { type: string, name: string, description: string, optional: boolean?, permissions: {[string]: boolean}?, lowerRank: boolean?, ignoreSelf: boolean?, shouldRequest: boolean? }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Registry","url":"/api/Registry#properties","content":" ","version":null,"tagName":"h2"},{"title":"types​","type":1,"pageTitle":"Registry","url":"/api/Registry#types","content":"&lt;/&gt; Registry.types: {[string]: ArgumentType}   ","version":null,"tagName":"h3"},{"title":"commands​","type":1,"pageTitle":"Registry","url":"/api/Registry#commands","content":"&lt;/&gt; Registry.commands: {[string]: CommandDefinition}   ","version":null,"tagName":"h3"},{"title":"commandsList​","type":1,"pageTitle":"Registry","url":"/api/Registry#commandsList","content":"&lt;/&gt; Registry.commandsList: {CommandDefinition}  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Registry","url":"/api/Registry#functions","content":" ","version":null,"tagName":"h2"},{"title":"makeEnumType​","type":1,"pageTitle":"Registry","url":"/api/Registry#makeEnumType","content":"&lt;/&gt; Registry.makeEnumType( typeName: string, enumItems: {EnumItem | string} ) → () Makes an Enum argument type definition  ","version":null,"tagName":"h3"},{"title":"makeSequenceType​","type":1,"pageTitle":"Registry","url":"/api/Registry#makeSequenceType","content":"&lt;/&gt; Registry.makeSequenceType(definition: SequenceDefinition?) → () ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Registry","url":"/api/Registry##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Registry","url":"/api/Registry#SequenceDefinition","content":"type SequenceDefinition = { constructor: (...any) → any, parse: (...any) → any, transform: (string) → any, validate: (any) → boolean, prefixes: {[string]: string} }  Makes an sequence argument type definition, useful for Color3, Vector3, etc  ","version":null,"tagName":"h3"},{"title":"registerType​","type":1,"pageTitle":"Registry","url":"/api/Registry#registerType","content":"&lt;/&gt; Registry.registerType( name: string, typeObject: Type.ArgumentType, override: Type.Dict? ) → () ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Registry","url":"/api/Registry##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Registry","url":"/api/Registry#ArgumentType","content":"type ArgumentType = { name: string, displayName: string?, listable: boolean?, filterLog: boolean?, transform: ArgumentFunction?, validate: ArgumentFunction, parse: ArgumentFunction, preParse: ArgumentFunction?, postParse: ArgumentFunction?, suggestions: ArgumentFunction?, prefixes: {[string]: string}? }  Registers an argument type  ","version":null,"tagName":"h3"},{"title":"registerCommand​","type":1,"pageTitle":"Registry","url":"/api/Registry#registerCommand","content":"&lt;/&gt; Registry.registerCommand( _K: any, commandObject: Type.CommandDefinition ) → () ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Registry","url":"/api/Registry##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Registry","url":"/api/Registry#CommandDefinition","content":"type CommandDefinition = { name: string, aliases: {string}?, description: string, group: string, noLog: boolean?, args: {ArgumentDefinition}, permissions: {[string]: boolean}?, envClient: {} | () → {}?, env: {} | () → {}?, runClient: (...any) → ()?, run: (...any) → ()? }  Registers a command  ","version":null,"tagName":"h3"},{"title":"registerCommandAlias​","type":1,"pageTitle":"Registry","url":"/api/Registry#registerCommandAlias","content":"&lt;/&gt; Registry.registerCommandAlias( _K: any, alias: string, command: string ) → () Registers a local command alias  ","version":null,"tagName":"h3"},{"title":"registerCommandModule​","type":1,"pageTitle":"Registry","url":"/api/Registry#registerCommandModule","content":"&lt;/&gt; Registry.registerCommandModule( _K: any, commandModule: ModuleScript ) → () Registers a list of commands with the module name as the command group ","version":null,"tagName":"h3"},{"title":"String","type":0,"sectionRef":"#","url":"/api/String","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"String","url":"/api/String#functions","content":" ","version":null,"tagName":"h2"},{"title":"escapePattern​","type":1,"pageTitle":"String","url":"/api/String#escapePattern","content":"&lt;/&gt; String.escapePattern(s: string) → string Escape magic string pattern characters: % . ( ) [ ] + - * ? ^ $  ","version":null,"tagName":"h3"},{"title":"escapeRichText​","type":1,"pageTitle":"String","url":"/api/String#escapeRichText","content":"&lt;/&gt; String.escapeRichText(s: string) → string Escape RichText tags  ","version":null,"tagName":"h3"},{"title":"unescapeRichText​","type":1,"pageTitle":"String","url":"/api/String#unescapeRichText","content":"&lt;/&gt; String.unescapeRichText(s: string) → string Unescape RichText tags  ","version":null,"tagName":"h3"},{"title":"splitOutsideQuotes​","type":1,"pageTitle":"String","url":"/api/String#splitOutsideQuotes","content":"&lt;/&gt; String.splitOutsideQuotes( text: string, delimiter: string? ) → {string}? Splits a string by a specified delimiter, but does not split within quoted sequences.  ","version":null,"tagName":"h3"},{"title":"stripQuotes​","type":1,"pageTitle":"String","url":"/api/String#stripQuotes","content":"&lt;/&gt; String.stripQuotes(s: string) → string Strip enclosing quotes from a string  ","version":null,"tagName":"h3"},{"title":"trimStart​","type":1,"pageTitle":"String","url":"/api/String#trimStart","content":"&lt;/&gt; String.trimStart(s: string) → string Strip whitespace from the start of a string  ","version":null,"tagName":"h3"},{"title":"trimEnd​","type":1,"pageTitle":"String","url":"/api/String#trimEnd","content":"&lt;/&gt; String.trimEnd(s: string) → string Strip whitespace from the end of a string  ","version":null,"tagName":"h3"},{"title":"trim​","type":1,"pageTitle":"String","url":"/api/String#trim","content":"&lt;/&gt; String.trim(s: string) → string Strip whitespace from both ends of a string  ","version":null,"tagName":"h3"},{"title":"filterResult​","type":1,"pageTitle":"String","url":"/api/String#filterResult","content":"&lt;/&gt; String.filterResult( message: string, fromUserId: number, filterContext: Enum.TextFilterContext? ) → ( boolean, TextFilterResult | string ) Returns a TextFilterResult with TextService.FilterStringAsync to be used with String.filterResultForBroadcast or String.filterResultForUser  ","version":null,"tagName":"h3"},{"title":"filterResultForBroadcast​","type":1,"pageTitle":"String","url":"/api/String#filterResultForBroadcast","content":"&lt;/&gt; String.filterResultForBroadcast( filterResult: TextFilterResult | string, fromUserId: number ) → () Filters a TextFilterResult for broadcast messages with TextService.FilterStringAsync  ","version":null,"tagName":"h3"},{"title":"filterResultForUser​","type":1,"pageTitle":"String","url":"/api/String#filterResultForUser","content":"&lt;/&gt; String.filterResultForUser( filterResult: TextFilterResult | string, fromUserId: number, toUserId: number ) → () Filters a TextFilterResult for chat messages chat with TextService.FilterStringAsync  ","version":null,"tagName":"h3"},{"title":"filterForBroadcast​","type":1,"pageTitle":"String","url":"/api/String#filterForBroadcast","content":"&lt;/&gt; String.filterForBroadcast( message: string, fromUserId: number, filterContext: Enum.TextFilterContext? ) → string Filters a broadcast message with TextService.FilterStringAsync  ","version":null,"tagName":"h3"},{"title":"filterForUser​","type":1,"pageTitle":"String","url":"/api/String#filterForUser","content":"&lt;/&gt; String.filterForUser( message: string, fromUserId: number, toUserId: number, filterContext: Enum.TextFilterContext? ) → string Filters a chat message with TextService.FilterStringAsync ","version":null,"tagName":"h3"},{"title":"Installation","type":0,"sectionRef":"#","url":"/docs/getting-started/installation","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Installation","url":"/docs/getting-started/installation#prerequisites","content":" Make sure you have Roblox Studio installed on your environment.  Roblox Studio: Download and install Roblox Studio  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Installation","url":"/docs/getting-started/installation#installation-1","content":" danger Be aware of models impersonating Kohl's Admin. The model should only be made by @Scripth. Unofficial models may contain unwanted content such as, but not limited to: viruses, backdoors, unwanted admins.  ","version":"Next","tagName":"h2"},{"title":"Step 1: Acquire the KA Official Loader Model​","type":1,"pageTitle":"Installation","url":"/docs/getting-started/installation#step-1-acquire-the-ka-official-loader-model","content":" Go to the KA Official Loader page.Click the Get Model button to add the model to your inventory.  ","version":"Next","tagName":"h3"},{"title":"Step 2: Open Roblox Studio​","type":1,"pageTitle":"Installation","url":"/docs/getting-started/installation#step-2-open-roblox-studio","content":" Launch Roblox Studio on your computer.Open the experience you want to install the KA Loader in or create a new experience.  ","version":"Next","tagName":"h3"},{"title":"Step 3: Import the KA Official Loader Model​","type":1,"pageTitle":"Installation","url":"/docs/getting-started/installation#step-3-import-the-ka-official-loader-model","content":" In Roblox Studio, open the Toolbox by selecting View &gt; Toolbox from the top menu.In the Toolbox, click on the Inventory tab and search for Kohl's Admin and click on the model.Click OK on the script warning prompt.Once the KA Loader model is in place, save your changes by selecting File &gt; Publish to Roblox.You may also participate in Kohl's Game Hub, by going to File &gt; GameSettings &gt; Security &gt; Allow HTTP Requests.  ","version":"Next","tagName":"h3"},{"title":"Step 4: Verify Installation​","type":1,"pageTitle":"Installation","url":"/docs/getting-started/installation#step-4-verify-installation","content":" Open and play the experience that you've imported the model into.Test some basic commands to make sure the admin commands are functioning as expected.    tip Still need help? Feel free to join the Kohl's Admin Discord! ","version":"Next","tagName":"h3"},{"title":"Custom Commands","type":0,"sectionRef":"#","url":"/docs/custom_commands","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Custom Commands","url":"/docs/custom_commands#prerequisites","content":" Make sure you have Kohl's Admin: Ensure that Kohl's Admin is present in your experience.Addons Folder: Confirm that Kohl's Admin has a folder named Addons. This is where you'll place your custom command scripts.  ","version":"Next","tagName":"h2"},{"title":"Addon Setup​","type":1,"pageTitle":"Custom Commands","url":"/docs/custom_commands#addon-setup","content":" All custom commands are part of an Addon. For this section we will create addons that only create custom commands, but in later parts we will show the extent of what addons can do.  All addons are a ModuleScript that returns a function. To start, create a module script and inside of it write the following:  return function(_K) -- Addon code goes here! end   Inside of this function is where we will be adding our custom commands. The name of the addon can be anything, but for this example we encourage &quot;customCommands&quot;.  danger Adding Client or Server an Addon file's name will make it only run in that context. This will make the other context unaware of the command!  ","version":"Next","tagName":"h2"},{"title":"Creating a Custom Command​","type":1,"pageTitle":"Custom Commands","url":"/docs/custom_commands#creating-a-custom-command","content":" To create a custom command, you must register it with the Registry, using registerCommand().  Using this, our module becomes:  return function(_K) _K.Registry.registerCommand(_K, commandDefinition) end   commandDefinition is a placeholder for the real contents of our command! Commands require a lot of information, structured in a commandDefinition.  type commandDefinition { name: string, -- Name of the command. aliases: { string }?, -- Table of aliases. description: string, -- Description of what the command does. group: string, -- What group the command belongs to. noLog: boolean?, -- If the command should be hidden from logs. args: { ArgumentDefinition }?, -- A table of argument definitions. permissions: { [string]: boolean }? -- A table of role permissions required to run the command. envClient: {} | () -&gt; {}?, -- Sets up an environment for the command. env: {} | () -&gt; {}?, -- Sets up an environment for the command. runClient: (...any) -&gt; ()?, -- What runs on the client of the player that ran the command. run: (...any) -&gt; ()? -- What the command runs on the server. }   Look at the Example Addon to learn how to customize a commandDefinition.  tip You can put multiple custom commands in one addon! All you need to do is register multiple commands in the same module. ","version":"Next","tagName":"h2"},{"title":"Legacy Loader","type":0,"sectionRef":"#","url":"/docs/getting-started/legacy_loader","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Legacy Loader","url":"/docs/getting-started/legacy_loader#prerequisites","content":" Make sure you already have KA installed in your game before continuing.  KA Installation Guide: Click here to go to the setup guide.  Also ensure that you have both the Explorer and Properties tabs open.  You can do this by going to View on the menu of Roblox Studio, and toggle Explorer and Properties which is on the top left.  ","version":"Next","tagName":"h2"},{"title":"Changing to Legacy Loader​","type":1,"pageTitle":"Legacy Loader","url":"/docs/getting-started/legacy_loader#changing-to-legacy-loader","content":" Open the KA Model (Kohl's Admin)Click on Config.Go to the Properties tab, and enable the Legacy property.  ","version":"Next","tagName":"h2"},{"title":"Changing back to New Loader​","type":1,"pageTitle":"Legacy Loader","url":"/docs/getting-started/legacy_loader#changing-back-to-new-loader","content":" Open the KA Model (Kohl's Admin)Click on Config.Go to the Properties tab, and disable the Legacy property.  ","version":"Next","tagName":"h2"},{"title":"Verify Installation​","type":1,"pageTitle":"Legacy Loader","url":"/docs/getting-started/legacy_loader#verify-installation","content":" Open and play the experience that you've imported the model into.Test some basic commands to make sure the admin commands are functioning as expected.    tip Still need help? Feel free to join the Kohl's Admin Discord! ","version":"Next","tagName":"h2"},{"title":"Using Commands","type":0,"sectionRef":"#","url":"/docs/getting-started/using_commands","content":"","keywords":"","version":"Next"},{"title":"Information​","type":1,"pageTitle":"Using Commands","url":"/docs/getting-started/using_commands#information","content":" You can change the prefix by the in-game settings UI, or in the Settings script which is shown in the configuration guide.You can also run ;cmds to see the commands that you can use.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Using Commands","url":"/docs/getting-started/using_commands#prerequisites","content":" Make sure you already have KA installed in your game before continuing.  KA Installation Guide: Click here to go to the setup guide.  ","version":"Next","tagName":"h2"},{"title":"Using the Commandbar​","type":1,"pageTitle":"Using Commands","url":"/docs/getting-started/using_commands#using-the-commandbar","content":" The commandbar is for PC Users only.  Press ; on your keyboard to open the commandbar.Type out the command you wish to use without the prefix, or with the prefix, and the required information. You can type out more commands by running multiple commands with the prefix, example: ;size me 2 ;fly me Press enter on your keyboard to run the command.  ","version":"Next","tagName":"h2"},{"title":"Using the Roblox Chat​","type":1,"pageTitle":"Using Commands","url":"/docs/getting-started/using_commands#using-the-roblox-chat","content":" Press / on your keyboard to open the chat. If you wish to hide your command in the chat, type /e before the command. Type out the command you wish to use with the prefix, and the required information. You can type out more commands by running multiple commands with the prefix, example: ;size me 2 ;fly me Press enter on your keyboard to run the command.    tip Still need help? Feel free to join the Kohl's Admin Discord! ","version":"Next","tagName":"h2"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":"","version":"Next"},{"title":"What Is Kohl's Admin?​","type":1,"pageTitle":"Introduction","url":"/docs/intro#what-is-kohls-admin","content":" Welcome to the Kohl's Admin documentation.  Kohl's Admin (KA) is a versatile administrative tool designed for Roblox game developers. It provides a suite of commands and features that help you manage your game more efficiently. Whether you're moderating player behavior, testing game mechanics, or configuring server settings, Kohl's Admin offers a robust set of tools to enhance your development workflow.  ","version":"Next","tagName":"h2"},{"title":"Key Features​","type":1,"pageTitle":"Introduction","url":"/docs/intro#key-features","content":" Command Management: Execute a wide range of commands directly within your game.Player Moderation: Manage player behavior with tools to kick, ban, or mute players.Customizable Settings: Tailor the admin experience to fit the specific needs of your game.Real-Time Control: Adjust game settings and manage players on the fly.  ","version":"Next","tagName":"h2"},{"title":"Documentation Overview​","type":1,"pageTitle":"Introduction","url":"/docs/intro#documentation-overview","content":" This documentation is structured to help you:  Set Up: Learn how to install and configure Kohl's Admin.Use Features: Explore the various commands and features available in KA.Troubleshoot: Find solutions to common issues and get support.  We recommend starting with the Getting Started guide if you are new to Kohl's Admin. For more advanced topics, you can explore the other sections of this documentation.    We hope this documentation helps you get the most out of Kohl's Admin. If you have any questions or need further assistance, don't hesitate to reach out to the community or consult the Support section. ","version":"Next","tagName":"h2"},{"title":"UI","type":0,"sectionRef":"#","url":"/api/UI","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"UI","url":"/api/UI#types","content":" ","version":null,"tagName":"h2"},{"title":"Platform​","type":1,"pageTitle":"UI","url":"/api/UI#Platform","content":"&lt;/&gt; type Platform = &quot;Console&quot; | &quot;Mobile&quot; | &quot;PC&quot;   ","version":null,"tagName":"h3"},{"title":"ActiveStateType​","type":1,"pageTitle":"UI","url":"/api/UI#ActiveStateType","content":"&lt;/&gt; type ActiveStateType = &quot;hover&quot; | &quot;floating&quot;   ","version":null,"tagName":"h3"},{"title":"Theme​","type":1,"pageTitle":"UI","url":"/api/UI#Theme","content":"&lt;/&gt; interface Theme { Transparency: State&lt;number&gt; Primary: State&lt;Color3 &gt; PrimaryText: State&lt;Color3 &gt; Secondary: State&lt;Color3 &gt; SecondaryText: State&lt;Color3 &gt; Border: State&lt;Color3 &gt; Valid: State&lt;Color3 &gt; Invalid: State&lt;Color3 &gt; FontSize: State&lt;number&gt; Font: State&lt;Font &gt; FontMono: State&lt;Font &gt; FontHeavy: State&lt;Font &gt; FontBold: State&lt;Font &gt; FontSemiBold: State&lt;Font &gt; FontLight: State&lt;Font &gt; CornerRadius: State&lt;UDim &gt; CornerHalf: State&lt;UDim &gt; CornerDiameter: State&lt;UDim &gt; Padding: State&lt;UDim &gt; PaddingHalf: State&lt;UDim &gt; PaddingDouble: State&lt;UDim &gt; StrokeEnabled: State&lt;boolean&gt; NormalTween: State&lt;TweenInfo &gt; TransparencyClamped: State&lt;number&gt; ScrollMidImage: State&lt;string&gt; ScrollTopImage: State&lt;string&gt; ScrollBottomImage: State&lt;string&gt; SoundsEnabled: State&lt;boolean&gt; TypingSounds: State&lt;boolean&gt; TypingSoundsOnEveryTextBox: State&lt;boolean&gt; Volume: State&lt;number&gt; } A directory of Flux state for UI components to use as theme variables ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"UI","url":"/api/UI#properties","content":" ","version":null,"tagName":"h2"},{"title":"GuiService​","type":1,"pageTitle":"UI","url":"/api/UI#GuiService","content":"&lt;/&gt; UI.GuiService: GuiService    ","version":null,"tagName":"h3"},{"title":"TextService​","type":1,"pageTitle":"UI","url":"/api/UI#TextService","content":"&lt;/&gt; UI.TextService: TextService    ","version":null,"tagName":"h3"},{"title":"UserInputService​","type":1,"pageTitle":"UI","url":"/api/UI#UserInputService","content":"&lt;/&gt; UI.UserInputService: UserInputService    ","version":null,"tagName":"h3"},{"title":"PlayerGui​","type":1,"pageTitle":"UI","url":"/api/UI#PlayerGui","content":"&lt;/&gt; UI.PlayerGui: PlayerGui    ","version":null,"tagName":"h3"},{"title":"Touch​","type":1,"pageTitle":"UI","url":"/api/UI#Touch","content":"&lt;/&gt; UI.Touch: boolean   ","version":null,"tagName":"h3"},{"title":"Platform​","type":1,"pageTitle":"UI","url":"/api/UI#Platform","content":"&lt;/&gt; UI.Platform: Platform   ","version":null,"tagName":"h3"},{"title":"Attribute​","type":1,"pageTitle":"UI","url":"/api/UI#Attribute","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Attribute: newproxy A marker for defining Instance attributes in UI.edit  ","version":null,"tagName":"h3"},{"title":"Children​","type":1,"pageTitle":"UI","url":"/api/UI#Children","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Children: newproxy A marker for defining Instance children in UI.edit  ","version":null,"tagName":"h3"},{"title":"Event​","type":1,"pageTitle":"UI","url":"/api/UI#Event","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Event: { Attribute=newproxy, Property=newproxy } Markers for defining events in UI.edit  ","version":null,"tagName":"h3"},{"title":"Hook​","type":1,"pageTitle":"UI","url":"/api/UI#Hook","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Hook: newproxy A marker for defining UI state hooks in UI.edit  ","version":null,"tagName":"h3"},{"title":"Nil​","type":1,"pageTitle":"UI","url":"/api/UI#Nil","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UI.Nil: newproxy A marker for defining Nil defaultState in UI.makeStatefulDefaults  ","version":null,"tagName":"h3"},{"title":"TopbarInset​","type":1,"pageTitle":"UI","url":"/api/UI#TopbarInset","content":"&lt;/&gt; UI.TopbarInset: State&lt;Rect &gt; GuiService.TopbarInset as a Flux state  ","version":null,"tagName":"h3"},{"title":"LayerBottom​","type":1,"pageTitle":"UI","url":"/api/UI#LayerBottom","content":"&lt;/&gt; UI.LayerBottom: State&lt;ScreenGui &gt; The lowermost ScreenGui for UI components  ","version":null,"tagName":"h3"},{"title":"LayerDefault​","type":1,"pageTitle":"UI","url":"/api/UI#LayerDefault","content":"&lt;/&gt; UI.LayerDefault: State&lt;ScreenGui &gt; The default ScreenGui for UI components  ","version":null,"tagName":"h3"},{"title":"LayerTop​","type":1,"pageTitle":"UI","url":"/api/UI#LayerTop","content":"&lt;/&gt; UI.LayerTop: State&lt;ScreenGui &gt; The topmost ScreenGui for UI components  ","version":null,"tagName":"h3"},{"title":"LayerTopbar​","type":1,"pageTitle":"UI","url":"/api/UI#LayerTopbar","content":"&lt;/&gt; UI.LayerTopbar: State&lt;ScreenGui &gt; The Topbar ScreenGui for UI components  ","version":null,"tagName":"h3"},{"title":"TopbarFrame​","type":1,"pageTitle":"UI","url":"/api/UI#TopbarFrame","content":"&lt;/&gt; UI.TopbarFrame: State&lt;Frame &gt; A sorted Topbar Frame for UI components, parented under UI.LayerTopbar ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"UI","url":"/api/UI#functions","content":" ","version":null,"tagName":"h2"},{"title":"activateState​","type":1,"pageTitle":"UI","url":"/api/UI#activateState","content":"&lt;/&gt; UI.activateState( activeState: State&lt;boolean&gt;, stateType: ActiveStateType ) → () A generalized function to handle activation/deactivation of both floating and hover states  ","version":null,"tagName":"h3"},{"title":"deactivateState​","type":1,"pageTitle":"UI","url":"/api/UI#deactivateState","content":"&lt;/&gt; UI.deactivateState( activeState: State&lt;boolean&gt;, stateType: ActiveStateType ) → () A generalized function to deactivate both floating and hover states  ","version":null,"tagName":"h3"},{"title":"toggleState​","type":1,"pageTitle":"UI","url":"/api/UI#toggleState","content":"&lt;/&gt; UI.toggleState( activeState: State&lt;boolean&gt;, stateType: ActiveStateType ) → () A generalized function to toggle both floating and hover states  ","version":null,"tagName":"h3"},{"title":"clearState​","type":1,"pageTitle":"UI","url":"/api/UI#clearState","content":"&lt;/&gt; UI.clearState(stateType: ActiveStateType) → () Function to clear a specific state type  ","version":null,"tagName":"h3"},{"title":"getLuminance​","type":1,"pageTitle":"UI","url":"/api/UI#getLuminance","content":"&lt;/&gt; UI.getLuminance(color: Color3 ) → number Gets the luminance of a Color3  ","version":null,"tagName":"h3"},{"title":"invertLuminance​","type":1,"pageTitle":"UI","url":"/api/UI#invertLuminance","content":"&lt;/&gt; UI.invertLuminance( color: Color3 , amount: number ) → Color3  Inverts the luminance of a Color3 by an amount  ","version":null,"tagName":"h3"},{"title":"pointInGuiObject​","type":1,"pageTitle":"UI","url":"/api/UI#pointInGuiObject","content":"&lt;/&gt; UI.pointInGuiObject( x: number, y: number, object: GuiObject ) → () Checks if x, y is within the absolute bounds of the GuiObject  ","version":null,"tagName":"h3"},{"title":"makeStatefulDefaults​","type":1,"pageTitle":"UI","url":"/api/UI#makeStatefulDefaults","content":"&lt;/&gt; UI.makeStatefulDefaults( default: Dict&lt;any&gt;, definition: SpecialDefinition? ) → () Helper function for defining Flux state defaults  ","version":null,"tagName":"h3"},{"title":"edit​","type":1,"pageTitle":"UI","url":"/api/UI#edit","content":"&lt;/&gt; UI.edit( new: Instance | Dict&lt;any&gt;, definition: SpecialDefinition | GuiObject ) → Instance | Dict&lt;any&gt; Inherits Flux.edit Parents children to the ._content variable of a UI component if one exists Numeric indicies are defined as children with GuiObject.LayoutOrder set to the index Allows UI.Hook to easily hook to default UI state or RBXScriptSignal aliases  ","version":null,"tagName":"h3"},{"title":"new​","type":1,"pageTitle":"UI","url":"/api/UI#new","content":"&lt;/&gt; UI.new(className: string) → UI.edit Creates a new Instance with UI.edit  ","version":null,"tagName":"h3"},{"title":"register​","type":1,"pageTitle":"UI","url":"/api/UI#register","content":"&lt;/&gt; UI.register( className: string, class: Dict&lt;any&gt; ) → () Registers a new UI component class  ","version":null,"tagName":"h3"},{"title":"registerDefaultClasses​","type":1,"pageTitle":"UI","url":"/api/UI#registerDefaultClasses","content":"&lt;/&gt; UI.registerDefaultClasses() → typeof(UI) Run to register all default classes in the UI module ","version":null,"tagName":"h3"},{"title":"Support","type":0,"sectionRef":"#","url":"/docs/support","content":"","keywords":"","version":"Next"},{"title":"Community Support​","type":1,"pageTitle":"Support","url":"/docs/support#community-support","content":" The best place to get help with Kohl's Admin is through our community-driven Discord server. Here, you can connect with other developers, ask questions, share your experiences, and get real-time support from experienced users.  Join the Kohl's Admin Discord server: discord.gg/kohl  In the Discord server, you will find:  Help Channels: Dedicated channels where you can ask questions and get answers from the community.Announcements: Stay updated with the latest news and updates about Kohl's Admin.Feature Requests: Suggest new features or improvements and vote on suggestions from others.Bug Reports: Report any issues you encounter and get assistance with troubleshooting.  ","version":"Next","tagName":"h2"},{"title":"Documentation​","type":1,"pageTitle":"Support","url":"/docs/support#documentation","content":" Before reaching out for help, make sure to review the documentation. Many common questions and issues are addressed in the following sections:  Getting Started: A step-by-step guide to installing and configuring Kohl's Admin.  ","version":"Next","tagName":"h2"},{"title":"Contact Us​","type":1,"pageTitle":"Support","url":"/docs/support#contact-us","content":" If you're unable to find the help you need through the documentation or Discord, you can contact the Kohl's Admin team directly through the Discord server for further assistance.    We encourage you to be an active member of the community, whether by helping others or sharing your experiences. The more we contribute, the better Kohl's Admin can become for everyone. ","version":"Next","tagName":"h2"},{"title":"Troubleshoot","type":0,"sectionRef":"#","url":"/docs/troubleshooting","content":"Troubleshoot note Kohl's Admin is currently in development. Everything in these docs is subject to change.","keywords":"","version":"Next"},{"title":"Using UIs","type":0,"sectionRef":"#","url":"/docs/getting-started/using_uis","content":"","keywords":"","version":"Next"},{"title":"Information​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#information","content":" You can change the prefix by the in-game settings UI, or in the Settings script which is shown in the configuration guide.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#prerequisites","content":" Make sure you already have KA installed in your game before continuing.  KA Installation Guide: Click here to go to the setup guide.  ","version":"Next","tagName":"h2"},{"title":"New Loader's Dashboard​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#new-loaders-dashboard","content":" ","version":"Next","tagName":"h2"},{"title":"Opening/Closing the Dashboard​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#openingclosing-the-dashboard","content":" You can open the Dashboard at the top of your screen near the Roblox menu.You can close the Dashboard by clicking on the X button on the UI or press on the X button on mobile.There is also a commandbar button next to the X which you can use to run commands.  ","version":"Next","tagName":"h3"},{"title":"Commands Section​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#commands-section","content":" The commands section lists out all the commands that you can use.It lists the default command, the alternatives, the required information and the description.It also has an search feature to allow you to search for specific commands.You can also hover your cursor (on pc) or hold your finger (on mobile) on a command to learn more about it.  ","version":"Next","tagName":"h3"},{"title":"Bans Section​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#bans-section","content":" The bans section lists out all the bans that has been done in your game.It also has an search feature to allow you to search for specific users.It lists out their username, userID, the reason, and the duration.You can unban players by pressing X next to the duration, which will give you a prompt to unban them below, which you can X to cancel, or ✔ to unban.  ","version":"Next","tagName":"h3"},{"title":"Members Section​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#members-section","content":" The members section lists out all the admins, or vips currently or offline (if saved) in your game.It lists out their username, userID, and their rank.It also has an search feature to allow you to search for specific users.  ","version":"Next","tagName":"h3"},{"title":"Logs Section​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#logs-section","content":" The logs section lists out all the developer logs, messages sent, commands ran, joins and leaves, kills and deaths, user damages, and purchases made in your game. It does not save throughout servers or the game.It lists info like the date, time, type of logs, username and description.It also has an search feature to allow you to search for specific informations.  ","version":"Next","tagName":"h3"},{"title":"Settings Section​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#settings-section","content":" The settings section lists out the options you can change for the game, or yourself.It also has an search feature to allow you to search for specific options.Super Admins may change settings throughout the game for everyone, which will save throughout servers.Regular players may change settings for themselves locally, but will not save once they leave.  ","version":"Next","tagName":"h3"},{"title":"About Section​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#about-section","content":" The about section shows the version, our server, the model, donations for special perks, and the credits.Our VIP gamepass allows you to have VIP commands in participating games!Our donation items give you exclusive titles in participating games!Consider donating to support the ongoing development of Kohl's Admin!  ","version":"Next","tagName":"h3"},{"title":"Legacy Loader's UIs​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#legacy-loaders-uis","content":" ","version":"Next","tagName":"h2"},{"title":"Opening/Closing the UIs​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#openingclosing-the-uis","content":" There is 6 total UIs in the legacy system which can be opened with commands.  ;help -- overview of the system ;credit -- credits ;settings -- settings ;bans -- user/s banned ;tools -- tools in ServerStorage ;admins -- people with admin ranks offline or currently in your game   It can be closed by using the X button, or minimized by the - button.  ","version":"Next","tagName":"h3"},{"title":"Help UI​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#help-ui","content":" The help UI lists out the prefix, what you can do, how to change settings (for devs), how to ban people, and the options on using commands.It also lists our server below, which you can join.  ","version":"Next","tagName":"h3"},{"title":"Credit UI​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#credit-ui","content":" The Credit UI lists out the admin creator's username, the model, donation options, and our server.You can get the model by using the Get it Now! button.It also lists out our donation options which have different perks, listed in our server or FAQ.It lists our server below, which you can join.  ","version":"Next","tagName":"h3"},{"title":"Settings UI​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#settings-ui","content":" The Settings UI lists out the options which only the Super Admin can change.This also can be found in the Settings script under Legacy_Loader  ","version":"Next","tagName":"h3"},{"title":"Bans UI​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#bans-ui","content":" The Bans UI lists out the banned user's username, and the duration.You cannot unban via the UI and must run unban [player] to unban them.  ","version":"Next","tagName":"h3"},{"title":"Tools UI​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#tools-ui","content":" The Tools UI lists out the tools which can be found in ServerStorage.You cannot give yourself tools via the UI and must run give [player] [string] in order to give someone tools.  ","version":"Next","tagName":"h3"},{"title":"Admins UI​","type":1,"pageTitle":"Using UIs","url":"/docs/getting-started/using_uis#admins-ui","content":" The Admins UI lists out the players with admin ranks currently or offline in your game.It lists out their username, and their rank.You cannot rank someone from the UI and must run the commands: vip [player], mod [player], admin [player], superadmin [player] in order to rank them. You can put temp in front of the command in order to give them a temporary rank which resets when they leave. You can also give ranks from the Settings script under Legacy_Loader which can only be removed via the script.You cannot unrank someone from the UI and must run the commands: unvip [player], unmod [player], unadmin [player], unsuperadmin [player] in order to unrank them.    tip Still need help? Feel free to join the Kohl's Admin Discord! ","version":"Next","tagName":"h3"},{"title":"Configuration","type":0,"sectionRef":"#","url":"/docs/getting-started/configuration","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#prerequisites","content":" Make sure you already have KA installed in your game before continuing.  KA Installation Guide: Click here to go to the setup guide.  Also ensure that you have both the Explorer and Properties tabs open.  You can do this by going to View on the menu of Roblox Studio, and toggle Explorer and Properties which is on the top left.  warning There are 2 Settings scripts, one under Config &gt; Settings and the other in Config &gt; Legacy &gt; Settings, these are DIFFERENT and depend on the if you are using the Legacy version or not.  ","version":"Next","tagName":"h2"},{"title":"Hierarchy of Admin Powers​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#hierarchy-of-admin-powers","content":" ","version":"Next","tagName":"h2"},{"title":"New Loader:​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#new-loader","content":" The new loader does not stack admin perks, they are now separated by default.  0\teveryone 1\tvip 2\tmod 3\tadmin 4\tsuperadmin inf\tcreator   ","version":"Next","tagName":"h3"},{"title":"Legacy Loader:​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#legacy-loader","content":" 0 Player 1 VIP Can use nonabusive commands only on self 2 Moderator Can kick, mute, &amp; use most commands 3 Administrator Can ban, crash, &amp; set Moderators/VIP 4 SuperAdmin Can grant permanent powers, &amp; shutdown the game 5 Owner Can set SuperAdmins, &amp; use all the commands 6 Game Creator Can set owners &amp; use all the commands   ","version":"Next","tagName":"h3"},{"title":"Types of Identifiers​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#types-of-identifiers","content":" UserID: 44391621 (Example)  You can find the UserId from a profile link on Roblox. Example: https://www.roblox.com/users/44391621/profile  Username: Scripth (Example)  You can find the Username from a profile on Roblox.  GroupID: 3403354 (Example)  You can find the GroupId from a group link on Roblox. Example: https://www.roblox.com/groups/3403354/Kohl  Group Rank: 0-255  You can find the Group Ranks in your group's configuration page by selecting Configure Group on your group page then Roles &gt; Role &gt; Rank  AssetId: 18966788838 (Example)  You can find the AssetId from marketplace items such as hats, shirts, pants, etc, using the link. Example: https://www.roblox.com/catalog/18966788838/Light-Crown  GamepassID: 5411126 (Example)  You can find the GamepassID from a game that has gamepasses, using the link. Example: https://www.roblox.com/game-pass/5411126/Premium-Donation  ","version":"Next","tagName":"h2"},{"title":"Configuring the New Loader​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#configuring-the-new-loader","content":" ","version":"Next","tagName":"h2"},{"title":"Banning players from your game​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#banning-players-from-your-game","content":" Stores bans in format: [&quot;UserId&quot;] = {Username, Reason, Duration, BannedByUserId}  Duration values:  -1: Permanent ban0: Server ban 0: Temporary ban (UTC timestamp in seconds for ban expiry)  bans = { [&quot;2&quot;] = { &quot;John Doe&quot;, &quot;He been noob.&quot;, nil, 44391621 }, [&quot;3&quot;] = { &quot;Jane Doe&quot;, &quot;She was noob.&quot;, 1720922623, 44391621 }, [&quot;5&quot;] = { nil, &quot;Deleted account&quot;, -1, 44391621 }, },   ","version":"Next","tagName":"h3"},{"title":"Giving Admin Roles​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#giving-admin-roles","content":" Asset Admin​  Give roles to a player if they have an asset.  assetRoles = { -- [assetId] = { &quot;mod&quot;, &quot;vip&quot; }, },   Gamepass Admin​  Give roles to a player if they have a gamepass.  gamepassRoles = { -- [gamePassId] = { &quot;mod&quot;, &quot;vip&quot; }, },   Subscription Admin​  Give roles to a player if they have a subscription.  subscriptionRoles = { -- [subscriptionId] = { &quot;mod&quot;, &quot;vip&quot; }, },   Group Admin​  Give roles to a player based on their rank in a group.  groupRoles = { -- [groupId] = { -- { rank = 200, roles = { &quot;admin&quot;, &quot;vip&quot; }, exactRank = false }, -- }, },   Friend Admin​  Give roles to friends of the game or group creator.  friendRoles = { -- &quot;vip&quot;, },   ","version":"Next","tagName":"h3"},{"title":"Free Admin​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#free-admin","content":" Give roles to everyone who joins the game.  freeAdmin = { -- &quot;vip&quot;, -- &quot;mod&quot;, -- &quot;admin&quot;, },   ","version":"Next","tagName":"h3"},{"title":"User Admin​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#user-admin","content":" Give roles to players by their UserID or Username.  userRoles = { vip = { &quot;Roblox&quot;, 156, game.PrivateServerOwnerId }, mod = {}, admin = {}, superadmin = {}, creator = {}, },   ","version":"Next","tagName":"h3"},{"title":"Settings​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#settings","content":" prefix = &quot;;&quot;, -- The prefix character used to trigger commands (e.g., &quot;;kick&quot;) chatCommands = true, -- Enables command execution via the Chat commandBarRank = 0, -- Minimum rank required to view the Command Bar (Set to false to disable for everyone) dashboardRank = 0, -- Minimum rank required to view the Dashboard (Set to false to disable for everyone) dashboardButtonRank = 0, -- Minimum rank required to view the Dashboard button (Set to false to disable for everyone) joinNotificationRank = 1, -- Minimum rank required to show the join notification (Set to false to disable for everyone) onlyShowUsableCommands = false, -- Only displays commands the player can purchase or use wrongPrefixWarning = true, -- Warns users when they use the wrong command prefix welcomeBadgeId = 0, -- Awards a badge to new players, set to 0 for no badge getKohlsAdminPopup = true, -- Enables the &quot;Enjoy Kohl's Admin?&quot; feedback popup to users gameHubEnabled = true, -- Adds your to a list of games with Kohl's Admin | ⚠️ Requires &quot;Allow HTTP Requests&quot; in File &gt; Game Settings &gt; Security | https://www.roblox.com/games/17873329124/Kohls-Admin-Games-Hub vip = true, -- Enables VIP-specific features and donation support | ⚠️ Required if gameHubEnabled is true saveLogs = true, -- Saves and syncs admin logs across multiple servers commands = { -- Configure command access per role everyone = { help = true, -- Enable help command shutdown = false, -- Disable shutdown capability }, vip = {}, mod = {}, admin = {}, superadmin = {}, creator = {}, }, announcements = { -- { -- From = &quot;_K&quot;, -- Set to a userId or &quot;_K&quot; -- Duration = 30, -- Duration in seconds until the announcement is hidden, set to 0 to not automatically hide -- Text = &quot;Hi!&quot;, -- }, }, notifications = { -- { -- From = &quot;_K&quot;, -- Set to a userId or &quot;_K&quot; -- Duration = 30, -- Duration in seconds until the notification is hidden, set to 0 to not automatically hide -- Text = &quot;Hi!&quot;, -- }, },   ","version":"Next","tagName":"h3"},{"title":"🎭 ROLE CONFIGURATION​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#-role-configuration","content":" Defines the hierarchy, permissions, and capabilities of each role, you can create as many custom roles as you want!  roles = { { -- Default Role (Base permissions for all users) _key = &quot;everyone&quot;, -- DO NOT CHANGE: System identifier name = &quot;Player&quot;, -- Display name color = &quot;#0ff&quot;, -- Role color, hex only! -- Command Access Groups groups = { -- &quot;creator&quot;, -- System-level commands -- &quot;administration&quot;, -- Administrative tools -- &quot;moderation&quot;, -- Moderation tools -- &quot;environment&quot;, -- World manipulation -- &quot;general&quot;, -- Staff utilities -- &quot;fun&quot;, -- Entertainment commands -- &quot;vip&quot;, -- Special features &quot;utility&quot;, -- Common utilities }, -- Permission Flags permissions = { admin = false, -- ⚠️ Complete bypass of all restrictions banasync = false, -- Permanent ban capability saveRoles = false, -- Role management for lower ranks settings = false, -- Global admin settings access serverlogs = false, -- Server-side log access }, onlyTargetSelf = true, -- Whether users can ONLY use commands on themselves }, { -- VIP Role _key = &quot;vip&quot;, -- DO NOT CHANGE: System identifier name = &quot;VIP&quot;, color = &quot;#0f8&quot;, groups = { &quot;vip&quot; }, permissions = {}, onlyTargetSelf = true, }, { -- Moderator Role _key = &quot;mod&quot;, -- DO NOT CHANGE: System identifier name = &quot;Moderator&quot;, color = &quot;#0f0&quot;, groups = { &quot;moderation&quot;, &quot;general&quot;, &quot;environment&quot;, &quot;fun&quot;, &quot;vip&quot; }, permissions = { serverlogs = true }, }, { -- Administrator Role _key = &quot;admin&quot;, -- DO NOT CHANGE: System identifier name = &quot;Administrator&quot;, color = &quot;#ff0&quot;, groups = { &quot;administration&quot;, &quot;moderation&quot;, &quot;general&quot;, &quot;environment&quot;, &quot;fun&quot;, &quot;vip&quot; }, permissions = { banasync = true, serverlogs = true }, }, { -- SuperAdmin Role _key = &quot;superadmin&quot;, -- DO NOT CHANGE: System identifier name = &quot;SuperAdmin&quot;, color = &quot;#f80&quot;, groups = { &quot;superadmin&quot;, &quot;administration&quot;, &quot;moderation&quot;, &quot;general&quot;, &quot;environment&quot;, &quot;fun&quot;, &quot;vip&quot; }, permissions = { banasync = true, saveRoles = true, settings = true, serverlogs = true }, }, [math.huge] = { -- Creator Role (Highest Authority) _key = &quot;creator&quot;, -- DO NOT CHANGE: System identifier name = &quot;Game Creator&quot;, color = &quot;#f00&quot;, permissions = { admin = true }, -- Full system access }, },   ","version":"Next","tagName":"h3"},{"title":"Configuring the Legacy Loader​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#configuring-the-legacy-loader","content":" ","version":"Next","tagName":"h2"},{"title":"Banning Someone from Joining​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#banning-someone-from-joining","content":" Unedited Script:  local Banned = { &quot;someoneyoudislike&quot; } -- For those who have wronged you, &amp; this guy   You can add more people or a single player by adding their Username or UserID. The list is endless.  local Banned = { &quot;someoneyoudislike&quot;, &quot;Roblox&quot;, 1234567 } -- For those who have wronged you, &amp; this guy   ","version":"Next","tagName":"h3"},{"title":"Adding Someone to your Admin List​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#adding-someone-to-your-admin-list","content":" Unedited Script:  local Owners = {} -- Can set SuperAdmins, &amp; use all the commands local SuperAdmins = {} -- Can set permanent admins, &amp; shutdown the game local Admins = {} -- Can ban, crash, &amp; set Moderators/VIP local Mods = {} -- Can kick, mute, &amp; use most commands local VIP = {} -- Can use nonabusive commands only on self   You can add more people or a single player by adding their Username or UserID. The list is endless.  local Owners = {&quot;someoneyoudislike&quot;, &quot;Roblox&quot;, 1234567} -- Can set SuperAdmins, &amp; use all the commands ...   ","version":"Next","tagName":"h3"},{"title":"Settings​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#settings-1","content":" This part should be pretty self explantory. The things they do are noted next to them.  -- Style Options Flat = true, -- Enables Flat theme / Disables Aero theme ForcedColor = false, -- Forces everyone to have set color &amp; transparency Color = Color3.new(0, 0, 0), -- Changes the Color of the user interface ColorTransparency = 0.75, -- Changes the Transparency of the user interface Chat = false, -- Enables the custom chat BubbleChat = false, -- Enables the custom bubble chat -- Basic Settings AdminCredit = true, -- Enables the credit GUI for that appears in the bottom right AutoClean = false, -- Enables automatic cleaning of hats &amp; tools in the Workspace AutoCleanDelay = 60, -- The delay between each AutoClean routine CommandBar = true, -- Enables the Command Bar | GLOBAL KEYBIND: \\ FunCommands = true, -- Enables fun yet unnecessary commands FreeAdmin = false, -- Set to 1-5 to grant admin powers to all, otherwise set to false JoinMessage = true, -- Shows an admin message on join with the prefix and your current rank PublicLogs = false, -- Allows all users to see the command &amp; chat logs Prefix = &quot;;&quot;, -- Character to begin a command   ","version":"Next","tagName":"h3"},{"title":"Adding a Group to your Admin List​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#adding-a-group-to-your-admin-list","content":" This part should also be pretty self explantory as well, the required information is stated below the spot where you are supposed to fill them.  GroupAdmin = { [12345] = { [254] = 4, [253] = 3 }; [GROUP_ID] = { [RANK] = ADMIN_POWER }; }   To add on more groups or ranks, just add on this line under.  [12345] = { [254] = 4, [253] = 3 };   ","version":"Next","tagName":"h3"},{"title":"Adding VIP Perks to your Game​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#adding-vip-perks-to-your-game","content":" This part should also be self explantory, the required information is stated under.  VIPAdmin = { [-12345] = 3; -- negative item_id (-12345) indicates a GamePass [12345] = 3; -- positive is every other catalog asset (shirts, pants, hats, etc) [54321] = 4; [ITEM_ID] = ADMIN_POWER; }   To add on more assets for VIP, just add a line under.  [54321] = 4;   ","version":"Next","tagName":"h3"},{"title":"Command Limits​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#command-limits","content":" This should be self explantory too, the required information is stated above.  -- COMMAND_LIMIT - How many commands can be used at once to prevent abuse. -- COOLDOWN_SECONDS - How long to wait between commands to prevent abuse. -- [ADMIN_POWER]= { COMMAND_LIMIT, COOLDOWN_SECONDS } CommandLimits = { [0] = { 1, 10 }, -- Player (rank 0) can use 1 command every 10 seconds [1] = { 16, 5 }, -- VIP (rank 1) can use 10 commands every 5 seconds [2] = { 32, 1 }, -- Moderator (rank 2) can use 16 commands every 1 second [3] = { 64, 1 }, -- Administrator (rank 3) can use 32 commands every 1 second [4] = { 128, 1 }, -- SuperAdmin (rank 4) can use 64 commands every 1 second [5] = { math.huge, 0 }, -- Owner (rank 5) can use infinite commands every 0 seconds [6] = { math.huge, 0 }, -- Game Creator (rank 6) can use infinite commands every 0 seconds [7] = { math.huge, 0 }, -- True Game Creator (rank 7) can use infinite commands every 0 seconds },   ","version":"Next","tagName":"h3"},{"title":"Command Permissions​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#command-permissions","content":" You can refer to the admin permissions table to set up permissions, commands can be found by using the :cmds command in chat, or cmd in the commandbar.  Permissions = { -- fly = 0; -- uncomment this line to allow everyone to fly! },   ","version":"Next","tagName":"h3"},{"title":"Verify Installation​","type":1,"pageTitle":"Configuration","url":"/docs/getting-started/configuration#verify-installation","content":" Open and play the experience that you've imported the model into.Test some basic commands to make sure the admin commands are functioning as expected.    tip Still need help? Feel free to join the Kohl's Admin Discord! ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}